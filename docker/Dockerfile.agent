# Build stage
FROM golang:1.25-alpine AS builder

# Install build dependencies for CGO and hardware access
RUN apk add --no-cache git make gcc musl-dev linux-headers

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build arguments
ARG VERSION=dev
ARG COMMIT=unknown
ARG DATE=unknown

# Build the binary with CGO enabled for hardware access
RUN CGO_ENABLED=1 GOOS=linux go build \
    -ldflags "-X main.version=${VERSION} -X main.commit=${COMMIT} -X main.date=${DATE}" \
    -o pi-agent ./cmd/pi-agent

# Final stage
FROM alpine:3.22

# Install runtime dependencies
RUN apk add --no-cache ca-certificates tzdata

# Create non-root user
RUN addgroup -S piagent && adduser -S piagent -G piagent

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/pi-agent .

# Create data directory
RUN mkdir -p /app/data && chown -R piagent:piagent /app

# Switch to non-root user
USER piagent

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD /app/pi-agent version || exit 1

# Run the binary
ENTRYPOINT ["/app/pi-agent"]