# Build stage
FROM golang:1.25-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git make build-base

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build arguments
ARG VERSION=dev
ARG COMMIT=unknown
ARG DATE=unknown

# Build the binary
RUN CGO_ENABLED=1 GOOS=linux CGO_CFLAGS="-DSQLITE_MAX_MMAP_SIZE=0" CGO_LDFLAGS="-lsqlite3" go build \
    -ldflags "-X main.version=${VERSION} -X main.commit=${COMMIT} -X main.date=${DATE}" \
    -o pi-controller ./cmd/pi-controller

# Final stage
FROM alpine:3.22

# Install runtime dependencies
RUN apk add --no-cache ca-certificates tzdata

# Create non-root user
RUN addgroup -S picontroller && adduser -S picontroller -G picontroller

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/pi-controller .

# Create data directory
RUN mkdir -p /app/data && chown -R picontroller:picontroller /app

# Switch to non-root user
USER picontroller

# Expose ports
EXPOSE 8080 9090 8081

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD /app/pi-controller version || exit 1

# Run the binary
ENTRYPOINT ["/app/pi-controller"]