// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.1
// source: proto/pi_controller.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClusterStatus int32

const (
	ClusterStatus_CLUSTER_STATUS_UNSPECIFIED  ClusterStatus = 0
	ClusterStatus_CLUSTER_STATUS_PENDING      ClusterStatus = 1
	ClusterStatus_CLUSTER_STATUS_PROVISIONING ClusterStatus = 2
	ClusterStatus_CLUSTER_STATUS_ACTIVE       ClusterStatus = 3
	ClusterStatus_CLUSTER_STATUS_DEGRADED     ClusterStatus = 4
	ClusterStatus_CLUSTER_STATUS_MAINTENANCE  ClusterStatus = 5
	ClusterStatus_CLUSTER_STATUS_FAILED       ClusterStatus = 6
)

// Enum value maps for ClusterStatus.
var (
	ClusterStatus_name = map[int32]string{
		0: "CLUSTER_STATUS_UNSPECIFIED",
		1: "CLUSTER_STATUS_PENDING",
		2: "CLUSTER_STATUS_PROVISIONING",
		3: "CLUSTER_STATUS_ACTIVE",
		4: "CLUSTER_STATUS_DEGRADED",
		5: "CLUSTER_STATUS_MAINTENANCE",
		6: "CLUSTER_STATUS_FAILED",
	}
	ClusterStatus_value = map[string]int32{
		"CLUSTER_STATUS_UNSPECIFIED":  0,
		"CLUSTER_STATUS_PENDING":      1,
		"CLUSTER_STATUS_PROVISIONING": 2,
		"CLUSTER_STATUS_ACTIVE":       3,
		"CLUSTER_STATUS_DEGRADED":     4,
		"CLUSTER_STATUS_MAINTENANCE":  5,
		"CLUSTER_STATUS_FAILED":       6,
	}
)

func (x ClusterStatus) Enum() *ClusterStatus {
	p := new(ClusterStatus)
	*p = x
	return p
}

func (x ClusterStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pi_controller_proto_enumTypes[0].Descriptor()
}

func (ClusterStatus) Type() protoreflect.EnumType {
	return &file_proto_pi_controller_proto_enumTypes[0]
}

func (x ClusterStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterStatus.Descriptor instead.
func (ClusterStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{0}
}

type NodeStatus int32

const (
	NodeStatus_NODE_STATUS_UNSPECIFIED  NodeStatus = 0
	NodeStatus_NODE_STATUS_DISCOVERED   NodeStatus = 1
	NodeStatus_NODE_STATUS_PROVISIONING NodeStatus = 2
	NodeStatus_NODE_STATUS_READY        NodeStatus = 3
	NodeStatus_NODE_STATUS_NOT_READY    NodeStatus = 4
	NodeStatus_NODE_STATUS_MAINTENANCE  NodeStatus = 5
	NodeStatus_NODE_STATUS_FAILED       NodeStatus = 6
	NodeStatus_NODE_STATUS_UNKNOWN      NodeStatus = 7
)

// Enum value maps for NodeStatus.
var (
	NodeStatus_name = map[int32]string{
		0: "NODE_STATUS_UNSPECIFIED",
		1: "NODE_STATUS_DISCOVERED",
		2: "NODE_STATUS_PROVISIONING",
		3: "NODE_STATUS_READY",
		4: "NODE_STATUS_NOT_READY",
		5: "NODE_STATUS_MAINTENANCE",
		6: "NODE_STATUS_FAILED",
		7: "NODE_STATUS_UNKNOWN",
	}
	NodeStatus_value = map[string]int32{
		"NODE_STATUS_UNSPECIFIED":  0,
		"NODE_STATUS_DISCOVERED":   1,
		"NODE_STATUS_PROVISIONING": 2,
		"NODE_STATUS_READY":        3,
		"NODE_STATUS_NOT_READY":    4,
		"NODE_STATUS_MAINTENANCE":  5,
		"NODE_STATUS_FAILED":       6,
		"NODE_STATUS_UNKNOWN":      7,
	}
)

func (x NodeStatus) Enum() *NodeStatus {
	p := new(NodeStatus)
	*p = x
	return p
}

func (x NodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pi_controller_proto_enumTypes[1].Descriptor()
}

func (NodeStatus) Type() protoreflect.EnumType {
	return &file_proto_pi_controller_proto_enumTypes[1]
}

func (x NodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeStatus.Descriptor instead.
func (NodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{1}
}

type NodeRole int32

const (
	NodeRole_NODE_ROLE_UNSPECIFIED NodeRole = 0
	NodeRole_NODE_ROLE_MASTER      NodeRole = 1
	NodeRole_NODE_ROLE_WORKER      NodeRole = 2
)

// Enum value maps for NodeRole.
var (
	NodeRole_name = map[int32]string{
		0: "NODE_ROLE_UNSPECIFIED",
		1: "NODE_ROLE_MASTER",
		2: "NODE_ROLE_WORKER",
	}
	NodeRole_value = map[string]int32{
		"NODE_ROLE_UNSPECIFIED": 0,
		"NODE_ROLE_MASTER":      1,
		"NODE_ROLE_WORKER":      2,
	}
)

func (x NodeRole) Enum() *NodeRole {
	p := new(NodeRole)
	*p = x
	return p
}

func (x NodeRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeRole) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pi_controller_proto_enumTypes[2].Descriptor()
}

func (NodeRole) Type() protoreflect.EnumType {
	return &file_proto_pi_controller_proto_enumTypes[2]
}

func (x NodeRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeRole.Descriptor instead.
func (NodeRole) EnumDescriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{2}
}

type GPIODirection int32

const (
	GPIODirection_GPIO_DIRECTION_UNSPECIFIED GPIODirection = 0
	GPIODirection_GPIO_DIRECTION_INPUT       GPIODirection = 1
	GPIODirection_GPIO_DIRECTION_OUTPUT      GPIODirection = 2
)

// Enum value maps for GPIODirection.
var (
	GPIODirection_name = map[int32]string{
		0: "GPIO_DIRECTION_UNSPECIFIED",
		1: "GPIO_DIRECTION_INPUT",
		2: "GPIO_DIRECTION_OUTPUT",
	}
	GPIODirection_value = map[string]int32{
		"GPIO_DIRECTION_UNSPECIFIED": 0,
		"GPIO_DIRECTION_INPUT":       1,
		"GPIO_DIRECTION_OUTPUT":      2,
	}
)

func (x GPIODirection) Enum() *GPIODirection {
	p := new(GPIODirection)
	*p = x
	return p
}

func (x GPIODirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPIODirection) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pi_controller_proto_enumTypes[3].Descriptor()
}

func (GPIODirection) Type() protoreflect.EnumType {
	return &file_proto_pi_controller_proto_enumTypes[3]
}

func (x GPIODirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPIODirection.Descriptor instead.
func (GPIODirection) EnumDescriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{3}
}

type GPIOPullMode int32

const (
	GPIOPullMode_GPIO_PULL_MODE_UNSPECIFIED GPIOPullMode = 0
	GPIOPullMode_GPIO_PULL_MODE_NONE        GPIOPullMode = 1
	GPIOPullMode_GPIO_PULL_MODE_UP          GPIOPullMode = 2
	GPIOPullMode_GPIO_PULL_MODE_DOWN        GPIOPullMode = 3
)

// Enum value maps for GPIOPullMode.
var (
	GPIOPullMode_name = map[int32]string{
		0: "GPIO_PULL_MODE_UNSPECIFIED",
		1: "GPIO_PULL_MODE_NONE",
		2: "GPIO_PULL_MODE_UP",
		3: "GPIO_PULL_MODE_DOWN",
	}
	GPIOPullMode_value = map[string]int32{
		"GPIO_PULL_MODE_UNSPECIFIED": 0,
		"GPIO_PULL_MODE_NONE":        1,
		"GPIO_PULL_MODE_UP":          2,
		"GPIO_PULL_MODE_DOWN":        3,
	}
)

func (x GPIOPullMode) Enum() *GPIOPullMode {
	p := new(GPIOPullMode)
	*p = x
	return p
}

func (x GPIOPullMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPIOPullMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pi_controller_proto_enumTypes[4].Descriptor()
}

func (GPIOPullMode) Type() protoreflect.EnumType {
	return &file_proto_pi_controller_proto_enumTypes[4]
}

func (x GPIOPullMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPIOPullMode.Descriptor instead.
func (GPIOPullMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{4}
}

type GPIODeviceType int32

const (
	GPIODeviceType_GPIO_DEVICE_TYPE_UNSPECIFIED GPIODeviceType = 0
	GPIODeviceType_GPIO_DEVICE_TYPE_DIGITAL     GPIODeviceType = 1
	GPIODeviceType_GPIO_DEVICE_TYPE_ANALOG      GPIODeviceType = 2
	GPIODeviceType_GPIO_DEVICE_TYPE_PWM         GPIODeviceType = 3
	GPIODeviceType_GPIO_DEVICE_TYPE_SPI         GPIODeviceType = 4
	GPIODeviceType_GPIO_DEVICE_TYPE_I2C         GPIODeviceType = 5
)

// Enum value maps for GPIODeviceType.
var (
	GPIODeviceType_name = map[int32]string{
		0: "GPIO_DEVICE_TYPE_UNSPECIFIED",
		1: "GPIO_DEVICE_TYPE_DIGITAL",
		2: "GPIO_DEVICE_TYPE_ANALOG",
		3: "GPIO_DEVICE_TYPE_PWM",
		4: "GPIO_DEVICE_TYPE_SPI",
		5: "GPIO_DEVICE_TYPE_I2C",
	}
	GPIODeviceType_value = map[string]int32{
		"GPIO_DEVICE_TYPE_UNSPECIFIED": 0,
		"GPIO_DEVICE_TYPE_DIGITAL":     1,
		"GPIO_DEVICE_TYPE_ANALOG":      2,
		"GPIO_DEVICE_TYPE_PWM":         3,
		"GPIO_DEVICE_TYPE_SPI":         4,
		"GPIO_DEVICE_TYPE_I2C":         5,
	}
)

func (x GPIODeviceType) Enum() *GPIODeviceType {
	p := new(GPIODeviceType)
	*p = x
	return p
}

func (x GPIODeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPIODeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pi_controller_proto_enumTypes[5].Descriptor()
}

func (GPIODeviceType) Type() protoreflect.EnumType {
	return &file_proto_pi_controller_proto_enumTypes[5]
}

func (x GPIODeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPIODeviceType.Descriptor instead.
func (GPIODeviceType) EnumDescriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{5}
}

type GPIOStatus int32

const (
	GPIOStatus_GPIO_STATUS_UNSPECIFIED GPIOStatus = 0
	GPIOStatus_GPIO_STATUS_ACTIVE      GPIOStatus = 1
	GPIOStatus_GPIO_STATUS_INACTIVE    GPIOStatus = 2
	GPIOStatus_GPIO_STATUS_ERROR       GPIOStatus = 3
)

// Enum value maps for GPIOStatus.
var (
	GPIOStatus_name = map[int32]string{
		0: "GPIO_STATUS_UNSPECIFIED",
		1: "GPIO_STATUS_ACTIVE",
		2: "GPIO_STATUS_INACTIVE",
		3: "GPIO_STATUS_ERROR",
	}
	GPIOStatus_value = map[string]int32{
		"GPIO_STATUS_UNSPECIFIED": 0,
		"GPIO_STATUS_ACTIVE":      1,
		"GPIO_STATUS_INACTIVE":    2,
		"GPIO_STATUS_ERROR":       3,
	}
)

func (x GPIOStatus) Enum() *GPIOStatus {
	p := new(GPIOStatus)
	*p = x
	return p
}

func (x GPIOStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPIOStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pi_controller_proto_enumTypes[6].Descriptor()
}

func (GPIOStatus) Type() protoreflect.EnumType {
	return &file_proto_pi_controller_proto_enumTypes[6]
}

func (x GPIOStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPIOStatus.Descriptor instead.
func (GPIOStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{6}
}

type CertificateType int32

const (
	CertificateType_CERTIFICATE_TYPE_UNSPECIFIED  CertificateType = 0
	CertificateType_CERTIFICATE_TYPE_CA           CertificateType = 1
	CertificateType_CERTIFICATE_TYPE_SERVER       CertificateType = 2
	CertificateType_CERTIFICATE_TYPE_CLIENT       CertificateType = 3
	CertificateType_CERTIFICATE_TYPE_SSH          CertificateType = 4
	CertificateType_CERTIFICATE_TYPE_INTERMEDIATE CertificateType = 5
)

// Enum value maps for CertificateType.
var (
	CertificateType_name = map[int32]string{
		0: "CERTIFICATE_TYPE_UNSPECIFIED",
		1: "CERTIFICATE_TYPE_CA",
		2: "CERTIFICATE_TYPE_SERVER",
		3: "CERTIFICATE_TYPE_CLIENT",
		4: "CERTIFICATE_TYPE_SSH",
		5: "CERTIFICATE_TYPE_INTERMEDIATE",
	}
	CertificateType_value = map[string]int32{
		"CERTIFICATE_TYPE_UNSPECIFIED":  0,
		"CERTIFICATE_TYPE_CA":           1,
		"CERTIFICATE_TYPE_SERVER":       2,
		"CERTIFICATE_TYPE_CLIENT":       3,
		"CERTIFICATE_TYPE_SSH":          4,
		"CERTIFICATE_TYPE_INTERMEDIATE": 5,
	}
)

func (x CertificateType) Enum() *CertificateType {
	p := new(CertificateType)
	*p = x
	return p
}

func (x CertificateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pi_controller_proto_enumTypes[7].Descriptor()
}

func (CertificateType) Type() protoreflect.EnumType {
	return &file_proto_pi_controller_proto_enumTypes[7]
}

func (x CertificateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateType.Descriptor instead.
func (CertificateType) EnumDescriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{7}
}

type CertificateStatus int32

const (
	CertificateStatus_CERTIFICATE_STATUS_UNSPECIFIED CertificateStatus = 0
	CertificateStatus_CERTIFICATE_STATUS_ACTIVE      CertificateStatus = 1
	CertificateStatus_CERTIFICATE_STATUS_EXPIRED     CertificateStatus = 2
	CertificateStatus_CERTIFICATE_STATUS_REVOKED     CertificateStatus = 3
	CertificateStatus_CERTIFICATE_STATUS_PENDING     CertificateStatus = 4
	CertificateStatus_CERTIFICATE_STATUS_FAILED      CertificateStatus = 5
	CertificateStatus_CERTIFICATE_STATUS_RENEWING    CertificateStatus = 6
)

// Enum value maps for CertificateStatus.
var (
	CertificateStatus_name = map[int32]string{
		0: "CERTIFICATE_STATUS_UNSPECIFIED",
		1: "CERTIFICATE_STATUS_ACTIVE",
		2: "CERTIFICATE_STATUS_EXPIRED",
		3: "CERTIFICATE_STATUS_REVOKED",
		4: "CERTIFICATE_STATUS_PENDING",
		5: "CERTIFICATE_STATUS_FAILED",
		6: "CERTIFICATE_STATUS_RENEWING",
	}
	CertificateStatus_value = map[string]int32{
		"CERTIFICATE_STATUS_UNSPECIFIED": 0,
		"CERTIFICATE_STATUS_ACTIVE":      1,
		"CERTIFICATE_STATUS_EXPIRED":     2,
		"CERTIFICATE_STATUS_REVOKED":     3,
		"CERTIFICATE_STATUS_PENDING":     4,
		"CERTIFICATE_STATUS_FAILED":      5,
		"CERTIFICATE_STATUS_RENEWING":    6,
	}
)

func (x CertificateStatus) Enum() *CertificateStatus {
	p := new(CertificateStatus)
	*p = x
	return p
}

func (x CertificateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pi_controller_proto_enumTypes[8].Descriptor()
}

func (CertificateStatus) Type() protoreflect.EnumType {
	return &file_proto_pi_controller_proto_enumTypes[8]
}

func (x CertificateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateStatus.Descriptor instead.
func (CertificateStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{8}
}

type CertificateBackend int32

const (
	CertificateBackend_CERTIFICATE_BACKEND_UNSPECIFIED CertificateBackend = 0
	CertificateBackend_CERTIFICATE_BACKEND_LOCAL       CertificateBackend = 1
	CertificateBackend_CERTIFICATE_BACKEND_VAULT       CertificateBackend = 2
)

// Enum value maps for CertificateBackend.
var (
	CertificateBackend_name = map[int32]string{
		0: "CERTIFICATE_BACKEND_UNSPECIFIED",
		1: "CERTIFICATE_BACKEND_LOCAL",
		2: "CERTIFICATE_BACKEND_VAULT",
	}
	CertificateBackend_value = map[string]int32{
		"CERTIFICATE_BACKEND_UNSPECIFIED": 0,
		"CERTIFICATE_BACKEND_LOCAL":       1,
		"CERTIFICATE_BACKEND_VAULT":       2,
	}
)

func (x CertificateBackend) Enum() *CertificateBackend {
	p := new(CertificateBackend)
	*p = x
	return p
}

func (x CertificateBackend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateBackend) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pi_controller_proto_enumTypes[9].Descriptor()
}

func (CertificateBackend) Type() protoreflect.EnumType {
	return &file_proto_pi_controller_proto_enumTypes[9]
}

func (x CertificateBackend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateBackend.Descriptor instead.
func (CertificateBackend) EnumDescriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{9}
}

type CAType int32

const (
	CAType_CA_TYPE_UNSPECIFIED  CAType = 0
	CAType_CA_TYPE_ROOT         CAType = 1
	CAType_CA_TYPE_INTERMEDIATE CAType = 2
)

// Enum value maps for CAType.
var (
	CAType_name = map[int32]string{
		0: "CA_TYPE_UNSPECIFIED",
		1: "CA_TYPE_ROOT",
		2: "CA_TYPE_INTERMEDIATE",
	}
	CAType_value = map[string]int32{
		"CA_TYPE_UNSPECIFIED":  0,
		"CA_TYPE_ROOT":         1,
		"CA_TYPE_INTERMEDIATE": 2,
	}
)

func (x CAType) Enum() *CAType {
	p := new(CAType)
	*p = x
	return p
}

func (x CAType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CAType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pi_controller_proto_enumTypes[10].Descriptor()
}

func (CAType) Type() protoreflect.EnumType {
	return &file_proto_pi_controller_proto_enumTypes[10]
}

func (x CAType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CAType.Descriptor instead.
func (CAType) EnumDescriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{10}
}

type CAStatus int32

const (
	CAStatus_CA_STATUS_UNSPECIFIED CAStatus = 0
	CAStatus_CA_STATUS_ACTIVE      CAStatus = 1
	CAStatus_CA_STATUS_INACTIVE    CAStatus = 2
	CAStatus_CA_STATUS_REVOKED     CAStatus = 3
	CAStatus_CA_STATUS_EXPIRED     CAStatus = 4
)

// Enum value maps for CAStatus.
var (
	CAStatus_name = map[int32]string{
		0: "CA_STATUS_UNSPECIFIED",
		1: "CA_STATUS_ACTIVE",
		2: "CA_STATUS_INACTIVE",
		3: "CA_STATUS_REVOKED",
		4: "CA_STATUS_EXPIRED",
	}
	CAStatus_value = map[string]int32{
		"CA_STATUS_UNSPECIFIED": 0,
		"CA_STATUS_ACTIVE":      1,
		"CA_STATUS_INACTIVE":    2,
		"CA_STATUS_REVOKED":     3,
		"CA_STATUS_EXPIRED":     4,
	}
)

func (x CAStatus) Enum() *CAStatus {
	p := new(CAStatus)
	*p = x
	return p
}

func (x CAStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CAStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pi_controller_proto_enumTypes[11].Descriptor()
}

func (CAStatus) Type() protoreflect.EnumType {
	return &file_proto_pi_controller_proto_enumTypes[11]
}

func (x CAStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CAStatus.Descriptor instead.
func (CAStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{11}
}

type CSRStatus int32

const (
	CSRStatus_CSR_STATUS_UNSPECIFIED CSRStatus = 0
	CSRStatus_CSR_STATUS_PENDING     CSRStatus = 1
	CSRStatus_CSR_STATUS_APPROVED    CSRStatus = 2
	CSRStatus_CSR_STATUS_REJECTED    CSRStatus = 3
	CSRStatus_CSR_STATUS_FAILED      CSRStatus = 4
)

// Enum value maps for CSRStatus.
var (
	CSRStatus_name = map[int32]string{
		0: "CSR_STATUS_UNSPECIFIED",
		1: "CSR_STATUS_PENDING",
		2: "CSR_STATUS_APPROVED",
		3: "CSR_STATUS_REJECTED",
		4: "CSR_STATUS_FAILED",
	}
	CSRStatus_value = map[string]int32{
		"CSR_STATUS_UNSPECIFIED": 0,
		"CSR_STATUS_PENDING":     1,
		"CSR_STATUS_APPROVED":    2,
		"CSR_STATUS_REJECTED":    3,
		"CSR_STATUS_FAILED":      4,
	}
)

func (x CSRStatus) Enum() *CSRStatus {
	p := new(CSRStatus)
	*p = x
	return p
}

func (x CSRStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CSRStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pi_controller_proto_enumTypes[12].Descriptor()
}

func (CSRStatus) Type() protoreflect.EnumType {
	return &file_proto_pi_controller_proto_enumTypes[12]
}

func (x CSRStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CSRStatus.Descriptor instead.
func (CSRStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{12}
}

// Cluster messages
type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status         ClusterStatus          `protobuf:"varint,4,opt,name=status,proto3,enum=pi_controller.ClusterStatus" json:"status,omitempty"`
	Version        string                 `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	MasterEndpoint string                 `protobuf:"bytes,6,opt,name=master_endpoint,json=masterEndpoint,proto3" json:"master_endpoint,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Nodes          []*Node                `protobuf:"bytes,9,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	mi := &file_proto_pi_controller_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cluster) GetStatus() ClusterStatus {
	if x != nil {
		return x.Status
	}
	return ClusterStatus_CLUSTER_STATUS_UNSPECIFIED
}

func (x *Cluster) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Cluster) GetMasterEndpoint() string {
	if x != nil {
		return x.MasterEndpoint
	}
	return ""
}

func (x *Cluster) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Cluster) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Cluster) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type CreateClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description    string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Version        string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	MasterEndpoint string `protobuf:"bytes,4,opt,name=master_endpoint,json=masterEndpoint,proto3" json:"master_endpoint,omitempty"`
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{1}
}

func (x *CreateClusterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateClusterRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateClusterRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateClusterRequest) GetMasterEndpoint() string {
	if x != nil {
		return x.MasterEndpoint
	}
	return ""
}

type GetClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{2}
}

func (x *GetClusterRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{3}
}

func (x *ListClustersRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListClustersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListClustersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clusters   []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	TotalCount int32      `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{4}
}

func (x *ListClustersResponse) GetClusters() []*Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *ListClustersResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type UpdateClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           *string        `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description    *string        `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Status         *ClusterStatus `protobuf:"varint,4,opt,name=status,proto3,enum=pi_controller.ClusterStatus,oneof" json:"status,omitempty"`
	Version        *string        `protobuf:"bytes,5,opt,name=version,proto3,oneof" json:"version,omitempty"`
	MasterEndpoint *string        `protobuf:"bytes,6,opt,name=master_endpoint,json=masterEndpoint,proto3,oneof" json:"master_endpoint,omitempty"`
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateClusterRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateClusterRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateClusterRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateClusterRequest) GetStatus() ClusterStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ClusterStatus_CLUSTER_STATUS_UNSPECIFIED
}

func (x *UpdateClusterRequest) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *UpdateClusterRequest) GetMasterEndpoint() string {
	if x != nil && x.MasterEndpoint != nil {
		return *x.MasterEndpoint
	}
	return ""
}

type DeleteClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteClusterRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteClusterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteClusterResponse) Reset() {
	*x = DeleteClusterResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterResponse) ProtoMessage() {}

func (x *DeleteClusterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterResponse.ProtoReflect.Descriptor instead.
func (*DeleteClusterResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteClusterResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Node messages
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IpAddress     string                 `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	MacAddress    string                 `protobuf:"bytes,4,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Status        NodeStatus             `protobuf:"varint,5,opt,name=status,proto3,enum=pi_controller.NodeStatus" json:"status,omitempty"`
	Role          NodeRole               `protobuf:"varint,6,opt,name=role,proto3,enum=pi_controller.NodeRole" json:"role,omitempty"`
	Architecture  string                 `protobuf:"bytes,7,opt,name=architecture,proto3" json:"architecture,omitempty"`
	Model         string                 `protobuf:"bytes,8,opt,name=model,proto3" json:"model,omitempty"`
	SerialNumber  string                 `protobuf:"bytes,9,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	CpuCores      int32                  `protobuf:"varint,10,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	Memory        int64                  `protobuf:"varint,11,opt,name=memory,proto3" json:"memory,omitempty"`
	ClusterId     *uint32                `protobuf:"varint,12,opt,name=cluster_id,json=clusterId,proto3,oneof" json:"cluster_id,omitempty"`
	KubeVersion   string                 `protobuf:"bytes,13,opt,name=kube_version,json=kubeVersion,proto3" json:"kube_version,omitempty"`
	NodeName      string                 `protobuf:"bytes,14,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	OsVersion     string                 `protobuf:"bytes,15,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	KernelVersion string                 `protobuf:"bytes,16,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	LastSeen      *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	GpioDevices   []*GPIODevice          `protobuf:"bytes,20,rep,name=gpio_devices,json=gpioDevices,proto3" json:"gpio_devices,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_proto_pi_controller_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{8}
}

func (x *Node) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Node) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Node) GetStatus() NodeStatus {
	if x != nil {
		return x.Status
	}
	return NodeStatus_NODE_STATUS_UNSPECIFIED
}

func (x *Node) GetRole() NodeRole {
	if x != nil {
		return x.Role
	}
	return NodeRole_NODE_ROLE_UNSPECIFIED
}

func (x *Node) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *Node) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Node) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Node) GetCpuCores() int32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *Node) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Node) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *Node) GetKubeVersion() string {
	if x != nil {
		return x.KubeVersion
	}
	return ""
}

func (x *Node) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *Node) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *Node) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *Node) GetLastSeen() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeen
	}
	return nil
}

func (x *Node) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Node) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Node) GetGpioDevices() []*GPIODevice {
	if x != nil {
		return x.GpioDevices
	}
	return nil
}

type CreateNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IpAddress    string   `protobuf:"bytes,2,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	MacAddress   string   `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Role         NodeRole `protobuf:"varint,4,opt,name=role,proto3,enum=pi_controller.NodeRole" json:"role,omitempty"`
	Architecture string   `protobuf:"bytes,5,opt,name=architecture,proto3" json:"architecture,omitempty"`
	Model        string   `protobuf:"bytes,6,opt,name=model,proto3" json:"model,omitempty"`
	SerialNumber string   `protobuf:"bytes,7,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	CpuCores     int32    `protobuf:"varint,8,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	Memory       int64    `protobuf:"varint,9,opt,name=memory,proto3" json:"memory,omitempty"`
	ClusterId    *uint32  `protobuf:"varint,10,opt,name=cluster_id,json=clusterId,proto3,oneof" json:"cluster_id,omitempty"`
}

func (x *CreateNodeRequest) Reset() {
	*x = CreateNodeRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNodeRequest) ProtoMessage() {}

func (x *CreateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{9}
}

func (x *CreateNodeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateNodeRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *CreateNodeRequest) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *CreateNodeRequest) GetRole() NodeRole {
	if x != nil {
		return x.Role
	}
	return NodeRole_NODE_ROLE_UNSPECIFIED
}

func (x *CreateNodeRequest) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *CreateNodeRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateNodeRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *CreateNodeRequest) GetCpuCores() int32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *CreateNodeRequest) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *CreateNodeRequest) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

type GetNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetNodeRequest) Reset() {
	*x = GetNodeRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeRequest) ProtoMessage() {}

func (x *GetNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeRequest.ProtoReflect.Descriptor instead.
func (*GetNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{10}
}

func (x *GetNodeRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int32       `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int32       `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	ClusterId *uint32     `protobuf:"varint,3,opt,name=cluster_id,json=clusterId,proto3,oneof" json:"cluster_id,omitempty"`
	Status    *NodeStatus `protobuf:"varint,4,opt,name=status,proto3,enum=pi_controller.NodeStatus,oneof" json:"status,omitempty"`
}

func (x *ListNodesRequest) Reset() {
	*x = ListNodesRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesRequest) ProtoMessage() {}

func (x *ListNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesRequest.ProtoReflect.Descriptor instead.
func (*ListNodesRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{11}
}

func (x *ListNodesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListNodesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListNodesRequest) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *ListNodesRequest) GetStatus() NodeStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return NodeStatus_NODE_STATUS_UNSPECIFIED
}

type ListNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes      []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	TotalCount int32   `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListNodesResponse) Reset() {
	*x = ListNodesResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesResponse) ProtoMessage() {}

func (x *ListNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesResponse.ProtoReflect.Descriptor instead.
func (*ListNodesResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{12}
}

func (x *ListNodesResponse) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ListNodesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type UpdateNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          *string     `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	IpAddress     *string     `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3,oneof" json:"ip_address,omitempty"`
	MacAddress    *string     `protobuf:"bytes,4,opt,name=mac_address,json=macAddress,proto3,oneof" json:"mac_address,omitempty"`
	Status        *NodeStatus `protobuf:"varint,5,opt,name=status,proto3,enum=pi_controller.NodeStatus,oneof" json:"status,omitempty"`
	Role          *NodeRole   `protobuf:"varint,6,opt,name=role,proto3,enum=pi_controller.NodeRole,oneof" json:"role,omitempty"`
	Architecture  *string     `protobuf:"bytes,7,opt,name=architecture,proto3,oneof" json:"architecture,omitempty"`
	Model         *string     `protobuf:"bytes,8,opt,name=model,proto3,oneof" json:"model,omitempty"`
	SerialNumber  *string     `protobuf:"bytes,9,opt,name=serial_number,json=serialNumber,proto3,oneof" json:"serial_number,omitempty"`
	CpuCores      *int32      `protobuf:"varint,10,opt,name=cpu_cores,json=cpuCores,proto3,oneof" json:"cpu_cores,omitempty"`
	Memory        *int64      `protobuf:"varint,11,opt,name=memory,proto3,oneof" json:"memory,omitempty"`
	ClusterId     *uint32     `protobuf:"varint,12,opt,name=cluster_id,json=clusterId,proto3,oneof" json:"cluster_id,omitempty"`
	KubeVersion   *string     `protobuf:"bytes,13,opt,name=kube_version,json=kubeVersion,proto3,oneof" json:"kube_version,omitempty"`
	NodeName      *string     `protobuf:"bytes,14,opt,name=node_name,json=nodeName,proto3,oneof" json:"node_name,omitempty"`
	OsVersion     *string     `protobuf:"bytes,15,opt,name=os_version,json=osVersion,proto3,oneof" json:"os_version,omitempty"`
	KernelVersion *string     `protobuf:"bytes,16,opt,name=kernel_version,json=kernelVersion,proto3,oneof" json:"kernel_version,omitempty"`
}

func (x *UpdateNodeRequest) Reset() {
	*x = UpdateNodeRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNodeRequest) ProtoMessage() {}

func (x *UpdateNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNodeRequest.ProtoReflect.Descriptor instead.
func (*UpdateNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateNodeRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateNodeRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateNodeRequest) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *UpdateNodeRequest) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

func (x *UpdateNodeRequest) GetStatus() NodeStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return NodeStatus_NODE_STATUS_UNSPECIFIED
}

func (x *UpdateNodeRequest) GetRole() NodeRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return NodeRole_NODE_ROLE_UNSPECIFIED
}

func (x *UpdateNodeRequest) GetArchitecture() string {
	if x != nil && x.Architecture != nil {
		return *x.Architecture
	}
	return ""
}

func (x *UpdateNodeRequest) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

func (x *UpdateNodeRequest) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *UpdateNodeRequest) GetCpuCores() int32 {
	if x != nil && x.CpuCores != nil {
		return *x.CpuCores
	}
	return 0
}

func (x *UpdateNodeRequest) GetMemory() int64 {
	if x != nil && x.Memory != nil {
		return *x.Memory
	}
	return 0
}

func (x *UpdateNodeRequest) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *UpdateNodeRequest) GetKubeVersion() string {
	if x != nil && x.KubeVersion != nil {
		return *x.KubeVersion
	}
	return ""
}

func (x *UpdateNodeRequest) GetNodeName() string {
	if x != nil && x.NodeName != nil {
		return *x.NodeName
	}
	return ""
}

func (x *UpdateNodeRequest) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

func (x *UpdateNodeRequest) GetKernelVersion() string {
	if x != nil && x.KernelVersion != nil {
		return *x.KernelVersion
	}
	return ""
}

type DeleteNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteNodeRequest) Reset() {
	*x = DeleteNodeRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeRequest) ProtoMessage() {}

func (x *DeleteNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteNodeRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteNodeResponse) Reset() {
	*x = DeleteNodeResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeResponse) ProtoMessage() {}

func (x *DeleteNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteNodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ProvisionNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ClusterId uint32 `protobuf:"varint,2,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (x *ProvisionNodeRequest) Reset() {
	*x = ProvisionNodeRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvisionNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionNodeRequest) ProtoMessage() {}

func (x *ProvisionNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionNodeRequest.ProtoReflect.Descriptor instead.
func (*ProvisionNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{16}
}

func (x *ProvisionNodeRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProvisionNodeRequest) GetClusterId() uint32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

type ProvisionNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ProvisionNodeResponse) Reset() {
	*x = ProvisionNodeResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvisionNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionNodeResponse) ProtoMessage() {}

func (x *ProvisionNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionNodeResponse.ProtoReflect.Descriptor instead.
func (*ProvisionNodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{17}
}

func (x *ProvisionNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProvisionNodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeprovisionNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeprovisionNodeRequest) Reset() {
	*x = DeprovisionNodeRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeprovisionNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprovisionNodeRequest) ProtoMessage() {}

func (x *DeprovisionNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprovisionNodeRequest.ProtoReflect.Descriptor instead.
func (*DeprovisionNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{18}
}

func (x *DeprovisionNodeRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeprovisionNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeprovisionNodeResponse) Reset() {
	*x = DeprovisionNodeResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeprovisionNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeprovisionNodeResponse) ProtoMessage() {}

func (x *DeprovisionNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeprovisionNodeResponse.ProtoReflect.Descriptor instead.
func (*DeprovisionNodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{19}
}

func (x *DeprovisionNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeprovisionNodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// GPIO messages
type GPIODevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	PinNumber   int32                  `protobuf:"varint,4,opt,name=pin_number,json=pinNumber,proto3" json:"pin_number,omitempty"`
	Direction   GPIODirection          `protobuf:"varint,5,opt,name=direction,proto3,enum=pi_controller.GPIODirection" json:"direction,omitempty"`
	PullMode    GPIOPullMode           `protobuf:"varint,6,opt,name=pull_mode,json=pullMode,proto3,enum=pi_controller.GPIOPullMode" json:"pull_mode,omitempty"`
	Value       int32                  `protobuf:"varint,7,opt,name=value,proto3" json:"value,omitempty"`
	DeviceType  GPIODeviceType         `protobuf:"varint,8,opt,name=device_type,json=deviceType,proto3,enum=pi_controller.GPIODeviceType" json:"device_type,omitempty"`
	Status      GPIOStatus             `protobuf:"varint,9,opt,name=status,proto3,enum=pi_controller.GPIOStatus" json:"status,omitempty"`
	NodeId      uint32                 `protobuf:"varint,10,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Config      *GPIOConfig            `protobuf:"bytes,11,opt,name=config,proto3" json:"config,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GPIODevice) Reset() {
	*x = GPIODevice{}
	mi := &file_proto_pi_controller_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPIODevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPIODevice) ProtoMessage() {}

func (x *GPIODevice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPIODevice.ProtoReflect.Descriptor instead.
func (*GPIODevice) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{20}
}

func (x *GPIODevice) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GPIODevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GPIODevice) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GPIODevice) GetPinNumber() int32 {
	if x != nil {
		return x.PinNumber
	}
	return 0
}

func (x *GPIODevice) GetDirection() GPIODirection {
	if x != nil {
		return x.Direction
	}
	return GPIODirection_GPIO_DIRECTION_UNSPECIFIED
}

func (x *GPIODevice) GetPullMode() GPIOPullMode {
	if x != nil {
		return x.PullMode
	}
	return GPIOPullMode_GPIO_PULL_MODE_UNSPECIFIED
}

func (x *GPIODevice) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GPIODevice) GetDeviceType() GPIODeviceType {
	if x != nil {
		return x.DeviceType
	}
	return GPIODeviceType_GPIO_DEVICE_TYPE_UNSPECIFIED
}

func (x *GPIODevice) GetStatus() GPIOStatus {
	if x != nil {
		return x.Status
	}
	return GPIOStatus_GPIO_STATUS_UNSPECIFIED
}

func (x *GPIODevice) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *GPIODevice) GetConfig() *GPIOConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *GPIODevice) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GPIODevice) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GPIOConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PWM specific
	Frequency int32 `protobuf:"varint,1,opt,name=frequency,proto3" json:"frequency,omitempty"`
	DutyCycle int32 `protobuf:"varint,2,opt,name=duty_cycle,json=dutyCycle,proto3" json:"duty_cycle,omitempty"`
	// SPI specific
	SpiMode    int32 `protobuf:"varint,3,opt,name=spi_mode,json=spiMode,proto3" json:"spi_mode,omitempty"`
	SpiBits    int32 `protobuf:"varint,4,opt,name=spi_bits,json=spiBits,proto3" json:"spi_bits,omitempty"`
	SpiSpeed   int32 `protobuf:"varint,5,opt,name=spi_speed,json=spiSpeed,proto3" json:"spi_speed,omitempty"`
	SpiChannel int32 `protobuf:"varint,6,opt,name=spi_channel,json=spiChannel,proto3" json:"spi_channel,omitempty"`
	// I2C specific
	I2CAddress int32 `protobuf:"varint,7,opt,name=i2c_address,json=i2cAddress,proto3" json:"i2c_address,omitempty"`
	I2CBus     int32 `protobuf:"varint,8,opt,name=i2c_bus,json=i2cBus,proto3" json:"i2c_bus,omitempty"`
	// Sampling configuration
	SampleRate int32 `protobuf:"varint,9,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"`
}

func (x *GPIOConfig) Reset() {
	*x = GPIOConfig{}
	mi := &file_proto_pi_controller_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPIOConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPIOConfig) ProtoMessage() {}

func (x *GPIOConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPIOConfig.ProtoReflect.Descriptor instead.
func (*GPIOConfig) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{21}
}

func (x *GPIOConfig) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *GPIOConfig) GetDutyCycle() int32 {
	if x != nil {
		return x.DutyCycle
	}
	return 0
}

func (x *GPIOConfig) GetSpiMode() int32 {
	if x != nil {
		return x.SpiMode
	}
	return 0
}

func (x *GPIOConfig) GetSpiBits() int32 {
	if x != nil {
		return x.SpiBits
	}
	return 0
}

func (x *GPIOConfig) GetSpiSpeed() int32 {
	if x != nil {
		return x.SpiSpeed
	}
	return 0
}

func (x *GPIOConfig) GetSpiChannel() int32 {
	if x != nil {
		return x.SpiChannel
	}
	return 0
}

func (x *GPIOConfig) GetI2CAddress() int32 {
	if x != nil {
		return x.I2CAddress
	}
	return 0
}

func (x *GPIOConfig) GetI2CBus() int32 {
	if x != nil {
		return x.I2CBus
	}
	return 0
}

func (x *GPIOConfig) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

type CreateGPIODeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PinNumber   int32          `protobuf:"varint,3,opt,name=pin_number,json=pinNumber,proto3" json:"pin_number,omitempty"`
	Direction   GPIODirection  `protobuf:"varint,4,opt,name=direction,proto3,enum=pi_controller.GPIODirection" json:"direction,omitempty"`
	PullMode    GPIOPullMode   `protobuf:"varint,5,opt,name=pull_mode,json=pullMode,proto3,enum=pi_controller.GPIOPullMode" json:"pull_mode,omitempty"`
	DeviceType  GPIODeviceType `protobuf:"varint,6,opt,name=device_type,json=deviceType,proto3,enum=pi_controller.GPIODeviceType" json:"device_type,omitempty"`
	NodeId      uint32         `protobuf:"varint,7,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Config      *GPIOConfig    `protobuf:"bytes,8,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CreateGPIODeviceRequest) Reset() {
	*x = CreateGPIODeviceRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateGPIODeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGPIODeviceRequest) ProtoMessage() {}

func (x *CreateGPIODeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGPIODeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateGPIODeviceRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{22}
}

func (x *CreateGPIODeviceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGPIODeviceRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateGPIODeviceRequest) GetPinNumber() int32 {
	if x != nil {
		return x.PinNumber
	}
	return 0
}

func (x *CreateGPIODeviceRequest) GetDirection() GPIODirection {
	if x != nil {
		return x.Direction
	}
	return GPIODirection_GPIO_DIRECTION_UNSPECIFIED
}

func (x *CreateGPIODeviceRequest) GetPullMode() GPIOPullMode {
	if x != nil {
		return x.PullMode
	}
	return GPIOPullMode_GPIO_PULL_MODE_UNSPECIFIED
}

func (x *CreateGPIODeviceRequest) GetDeviceType() GPIODeviceType {
	if x != nil {
		return x.DeviceType
	}
	return GPIODeviceType_GPIO_DEVICE_TYPE_UNSPECIFIED
}

func (x *CreateGPIODeviceRequest) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *CreateGPIODeviceRequest) GetConfig() *GPIOConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetGPIODeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetGPIODeviceRequest) Reset() {
	*x = GetGPIODeviceRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGPIODeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGPIODeviceRequest) ProtoMessage() {}

func (x *GetGPIODeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGPIODeviceRequest.ProtoReflect.Descriptor instead.
func (*GetGPIODeviceRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{23}
}

func (x *GetGPIODeviceRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListGPIODevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int32           `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int32           `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NodeId     *uint32         `protobuf:"varint,3,opt,name=node_id,json=nodeId,proto3,oneof" json:"node_id,omitempty"`
	DeviceType *GPIODeviceType `protobuf:"varint,4,opt,name=device_type,json=deviceType,proto3,enum=pi_controller.GPIODeviceType,oneof" json:"device_type,omitempty"`
	Status     *GPIOStatus     `protobuf:"varint,5,opt,name=status,proto3,enum=pi_controller.GPIOStatus,oneof" json:"status,omitempty"`
}

func (x *ListGPIODevicesRequest) Reset() {
	*x = ListGPIODevicesRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGPIODevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGPIODevicesRequest) ProtoMessage() {}

func (x *ListGPIODevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGPIODevicesRequest.ProtoReflect.Descriptor instead.
func (*ListGPIODevicesRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{24}
}

func (x *ListGPIODevicesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListGPIODevicesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListGPIODevicesRequest) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *ListGPIODevicesRequest) GetDeviceType() GPIODeviceType {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return GPIODeviceType_GPIO_DEVICE_TYPE_UNSPECIFIED
}

func (x *ListGPIODevicesRequest) GetStatus() GPIOStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GPIOStatus_GPIO_STATUS_UNSPECIFIED
}

type ListGPIODevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpioDevices []*GPIODevice `protobuf:"bytes,1,rep,name=gpio_devices,json=gpioDevices,proto3" json:"gpio_devices,omitempty"`
	TotalCount  int32         `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListGPIODevicesResponse) Reset() {
	*x = ListGPIODevicesResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGPIODevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGPIODevicesResponse) ProtoMessage() {}

func (x *ListGPIODevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGPIODevicesResponse.ProtoReflect.Descriptor instead.
func (*ListGPIODevicesResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{25}
}

func (x *ListGPIODevicesResponse) GetGpioDevices() []*GPIODevice {
	if x != nil {
		return x.GpioDevices
	}
	return nil
}

func (x *ListGPIODevicesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type UpdateGPIODeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        *string         `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description *string         `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Direction   *GPIODirection  `protobuf:"varint,4,opt,name=direction,proto3,enum=pi_controller.GPIODirection,oneof" json:"direction,omitempty"`
	PullMode    *GPIOPullMode   `protobuf:"varint,5,opt,name=pull_mode,json=pullMode,proto3,enum=pi_controller.GPIOPullMode,oneof" json:"pull_mode,omitempty"`
	DeviceType  *GPIODeviceType `protobuf:"varint,6,opt,name=device_type,json=deviceType,proto3,enum=pi_controller.GPIODeviceType,oneof" json:"device_type,omitempty"`
	Status      *GPIOStatus     `protobuf:"varint,7,opt,name=status,proto3,enum=pi_controller.GPIOStatus,oneof" json:"status,omitempty"`
	Config      *GPIOConfig     `protobuf:"bytes,8,opt,name=config,proto3,oneof" json:"config,omitempty"`
}

func (x *UpdateGPIODeviceRequest) Reset() {
	*x = UpdateGPIODeviceRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateGPIODeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGPIODeviceRequest) ProtoMessage() {}

func (x *UpdateGPIODeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGPIODeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateGPIODeviceRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateGPIODeviceRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateGPIODeviceRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateGPIODeviceRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateGPIODeviceRequest) GetDirection() GPIODirection {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return GPIODirection_GPIO_DIRECTION_UNSPECIFIED
}

func (x *UpdateGPIODeviceRequest) GetPullMode() GPIOPullMode {
	if x != nil && x.PullMode != nil {
		return *x.PullMode
	}
	return GPIOPullMode_GPIO_PULL_MODE_UNSPECIFIED
}

func (x *UpdateGPIODeviceRequest) GetDeviceType() GPIODeviceType {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return GPIODeviceType_GPIO_DEVICE_TYPE_UNSPECIFIED
}

func (x *UpdateGPIODeviceRequest) GetStatus() GPIOStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return GPIOStatus_GPIO_STATUS_UNSPECIFIED
}

func (x *UpdateGPIODeviceRequest) GetConfig() *GPIOConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type DeleteGPIODeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteGPIODeviceRequest) Reset() {
	*x = DeleteGPIODeviceRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteGPIODeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGPIODeviceRequest) ProtoMessage() {}

func (x *DeleteGPIODeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGPIODeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteGPIODeviceRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteGPIODeviceRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteGPIODeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteGPIODeviceResponse) Reset() {
	*x = DeleteGPIODeviceResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteGPIODeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGPIODeviceResponse) ProtoMessage() {}

func (x *DeleteGPIODeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGPIODeviceResponse.ProtoReflect.Descriptor instead.
func (*DeleteGPIODeviceResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteGPIODeviceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ReadGPIORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadGPIORequest) Reset() {
	*x = ReadGPIORequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadGPIORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGPIORequest) ProtoMessage() {}

func (x *ReadGPIORequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGPIORequest.ProtoReflect.Descriptor instead.
func (*ReadGPIORequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{29}
}

func (x *ReadGPIORequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ReadGPIOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId  uint32                 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Pin       int32                  `protobuf:"varint,2,opt,name=pin,proto3" json:"pin,omitempty"`
	Value     float64                `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ReadGPIOResponse) Reset() {
	*x = ReadGPIOResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadGPIOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGPIOResponse) ProtoMessage() {}

func (x *ReadGPIOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGPIOResponse.ProtoReflect.Descriptor instead.
func (*ReadGPIOResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{30}
}

func (x *ReadGPIOResponse) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *ReadGPIOResponse) GetPin() int32 {
	if x != nil {
		return x.Pin
	}
	return 0
}

func (x *ReadGPIOResponse) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ReadGPIOResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type WriteGPIORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WriteGPIORequest) Reset() {
	*x = WriteGPIORequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteGPIORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGPIORequest) ProtoMessage() {}

func (x *WriteGPIORequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGPIORequest.ProtoReflect.Descriptor instead.
func (*WriteGPIORequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{31}
}

func (x *WriteGPIORequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WriteGPIORequest) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type WriteGPIOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId  uint32                 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Pin       int32                  `protobuf:"varint,2,opt,name=pin,proto3" json:"pin,omitempty"`
	Value     int32                  `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *WriteGPIOResponse) Reset() {
	*x = WriteGPIOResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteGPIOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGPIOResponse) ProtoMessage() {}

func (x *WriteGPIOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGPIOResponse.ProtoReflect.Descriptor instead.
func (*WriteGPIOResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{32}
}

func (x *WriteGPIOResponse) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *WriteGPIOResponse) GetPin() int32 {
	if x != nil {
		return x.Pin
	}
	return 0
}

func (x *WriteGPIOResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *WriteGPIOResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type GPIOReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DeviceId  uint32                 `protobuf:"varint,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Value     float64                `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GPIOReading) Reset() {
	*x = GPIOReading{}
	mi := &file_proto_pi_controller_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPIOReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPIOReading) ProtoMessage() {}

func (x *GPIOReading) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPIOReading.ProtoReflect.Descriptor instead.
func (*GPIOReading) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{33}
}

func (x *GPIOReading) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GPIOReading) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *GPIOReading) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GPIOReading) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type StreamGPIOReadingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId   uint32 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	SampleRate int32  `protobuf:"varint,2,opt,name=sample_rate,json=sampleRate,proto3" json:"sample_rate,omitempty"` // readings per second
}

func (x *StreamGPIOReadingsRequest) Reset() {
	*x = StreamGPIOReadingsRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamGPIOReadingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamGPIOReadingsRequest) ProtoMessage() {}

func (x *StreamGPIOReadingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamGPIOReadingsRequest.ProtoReflect.Descriptor instead.
func (*StreamGPIOReadingsRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{34}
}

func (x *StreamGPIOReadingsRequest) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *StreamGPIOReadingsRequest) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

// Health and system info messages
type HealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthRequest) Reset() {
	*x = HealthRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthRequest) ProtoMessage() {}

func (x *HealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthRequest.ProtoReflect.Descriptor instead.
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{35}
}

type HealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Version   string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Uptime    string                 `protobuf:"bytes,4,opt,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *HealthResponse) Reset() {
	*x = HealthResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthResponse) ProtoMessage() {}

func (x *HealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthResponse.ProtoReflect.Descriptor instead.
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{36}
}

func (x *HealthResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HealthResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *HealthResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HealthResponse) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

type SystemInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SystemInfoRequest) Reset() {
	*x = SystemInfoRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInfoRequest) ProtoMessage() {}

func (x *SystemInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInfoRequest.ProtoReflect.Descriptor instead.
func (*SystemInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{37}
}

type SystemInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoVersion  string                 `protobuf:"bytes,1,opt,name=go_version,json=goVersion,proto3" json:"go_version,omitempty"`
	GoOs       string                 `protobuf:"bytes,2,opt,name=go_os,json=goOs,proto3" json:"go_os,omitempty"`
	GoArch     string                 `protobuf:"bytes,3,opt,name=go_arch,json=goArch,proto3" json:"go_arch,omitempty"`
	CpuCount   int32                  `protobuf:"varint,4,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	Goroutines int32                  `protobuf:"varint,5,opt,name=goroutines,proto3" json:"goroutines,omitempty"`
	Memory     *MemoryInfo            `protobuf:"bytes,6,opt,name=memory,proto3" json:"memory,omitempty"`
	Gc         *GCInfo                `protobuf:"bytes,7,opt,name=gc,proto3" json:"gc,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Uptime     string                 `protobuf:"bytes,9,opt,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *SystemInfoResponse) Reset() {
	*x = SystemInfoResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInfoResponse) ProtoMessage() {}

func (x *SystemInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInfoResponse.ProtoReflect.Descriptor instead.
func (*SystemInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{38}
}

func (x *SystemInfoResponse) GetGoVersion() string {
	if x != nil {
		return x.GoVersion
	}
	return ""
}

func (x *SystemInfoResponse) GetGoOs() string {
	if x != nil {
		return x.GoOs
	}
	return ""
}

func (x *SystemInfoResponse) GetGoArch() string {
	if x != nil {
		return x.GoArch
	}
	return ""
}

func (x *SystemInfoResponse) GetCpuCount() int32 {
	if x != nil {
		return x.CpuCount
	}
	return 0
}

func (x *SystemInfoResponse) GetGoroutines() int32 {
	if x != nil {
		return x.Goroutines
	}
	return 0
}

func (x *SystemInfoResponse) GetMemory() *MemoryInfo {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *SystemInfoResponse) GetGc() *GCInfo {
	if x != nil {
		return x.Gc
	}
	return nil
}

func (x *SystemInfoResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SystemInfoResponse) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

type MemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Alloc       uint64 `protobuf:"varint,1,opt,name=alloc,proto3" json:"alloc,omitempty"`
	TotalAlloc  uint64 `protobuf:"varint,2,opt,name=total_alloc,json=totalAlloc,proto3" json:"total_alloc,omitempty"`
	Sys         uint64 `protobuf:"varint,3,opt,name=sys,proto3" json:"sys,omitempty"`
	HeapAlloc   uint64 `protobuf:"varint,4,opt,name=heap_alloc,json=heapAlloc,proto3" json:"heap_alloc,omitempty"`
	HeapSys     uint64 `protobuf:"varint,5,opt,name=heap_sys,json=heapSys,proto3" json:"heap_sys,omitempty"`
	HeapInuse   uint64 `protobuf:"varint,6,opt,name=heap_inuse,json=heapInuse,proto3" json:"heap_inuse,omitempty"`
	HeapIdle    uint64 `protobuf:"varint,7,opt,name=heap_idle,json=heapIdle,proto3" json:"heap_idle,omitempty"`
	HeapObjects uint64 `protobuf:"varint,8,opt,name=heap_objects,json=heapObjects,proto3" json:"heap_objects,omitempty"`
}

func (x *MemoryInfo) Reset() {
	*x = MemoryInfo{}
	mi := &file_proto_pi_controller_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryInfo) ProtoMessage() {}

func (x *MemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryInfo.ProtoReflect.Descriptor instead.
func (*MemoryInfo) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{39}
}

func (x *MemoryInfo) GetAlloc() uint64 {
	if x != nil {
		return x.Alloc
	}
	return 0
}

func (x *MemoryInfo) GetTotalAlloc() uint64 {
	if x != nil {
		return x.TotalAlloc
	}
	return 0
}

func (x *MemoryInfo) GetSys() uint64 {
	if x != nil {
		return x.Sys
	}
	return 0
}

func (x *MemoryInfo) GetHeapAlloc() uint64 {
	if x != nil {
		return x.HeapAlloc
	}
	return 0
}

func (x *MemoryInfo) GetHeapSys() uint64 {
	if x != nil {
		return x.HeapSys
	}
	return 0
}

func (x *MemoryInfo) GetHeapInuse() uint64 {
	if x != nil {
		return x.HeapInuse
	}
	return 0
}

func (x *MemoryInfo) GetHeapIdle() uint64 {
	if x != nil {
		return x.HeapIdle
	}
	return 0
}

func (x *MemoryInfo) GetHeapObjects() uint64 {
	if x != nil {
		return x.HeapObjects
	}
	return 0
}

type GCInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumGc      uint32                 `protobuf:"varint,1,opt,name=num_gc,json=numGc,proto3" json:"num_gc,omitempty"`
	PauseTotal uint64                 `protobuf:"varint,2,opt,name=pause_total,json=pauseTotal,proto3" json:"pause_total,omitempty"`
	LastGc     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_gc,json=lastGc,proto3" json:"last_gc,omitempty"`
}

func (x *GCInfo) Reset() {
	*x = GCInfo{}
	mi := &file_proto_pi_controller_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GCInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCInfo) ProtoMessage() {}

func (x *GCInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCInfo.ProtoReflect.Descriptor instead.
func (*GCInfo) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{40}
}

func (x *GCInfo) GetNumGc() uint32 {
	if x != nil {
		return x.NumGc
	}
	return 0
}

func (x *GCInfo) GetPauseTotal() uint64 {
	if x != nil {
		return x.PauseTotal
	}
	return 0
}

func (x *GCInfo) GetLastGc() *timestamppb.Timestamp {
	if x != nil {
		return x.LastGc
	}
	return nil
}

type Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SerialNumber  string                 `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	CommonName    string                 `protobuf:"bytes,3,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	Type          CertificateType        `protobuf:"varint,4,opt,name=type,proto3,enum=pi_controller.CertificateType" json:"type,omitempty"`
	Status        CertificateStatus      `protobuf:"varint,5,opt,name=status,proto3,enum=pi_controller.CertificateStatus" json:"status,omitempty"`
	Subject       string                 `protobuf:"bytes,6,opt,name=subject,proto3" json:"subject,omitempty"`
	Issuer        string                 `protobuf:"bytes,7,opt,name=issuer,proto3" json:"issuer,omitempty"`
	NotBefore     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	NotAfter      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	Sans          []string               `protobuf:"bytes,10,rep,name=sans,proto3" json:"sans,omitempty"`
	KeyUsage      []string               `protobuf:"bytes,11,rep,name=key_usage,json=keyUsage,proto3" json:"key_usage,omitempty"`
	ExtKeyUsage   []string               `protobuf:"bytes,12,rep,name=ext_key_usage,json=extKeyUsage,proto3" json:"ext_key_usage,omitempty"`
	Backend       CertificateBackend     `protobuf:"varint,13,opt,name=backend,proto3,enum=pi_controller.CertificateBackend" json:"backend,omitempty"`
	NodeId        *uint32                `protobuf:"varint,14,opt,name=node_id,json=nodeId,proto3,oneof" json:"node_id,omitempty"`
	ClusterId     *uint32                `protobuf:"varint,15,opt,name=cluster_id,json=clusterId,proto3,oneof" json:"cluster_id,omitempty"`
	AutoRenew     bool                   `protobuf:"varint,16,opt,name=auto_renew,json=autoRenew,proto3" json:"auto_renew,omitempty"`
	RevokedAt     *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=revoked_at,json=revokedAt,proto3,oneof" json:"revoked_at,omitempty"`
	RevokedReason *string                `protobuf:"bytes,18,opt,name=revoked_reason,json=revokedReason,proto3,oneof" json:"revoked_reason,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Certificate) Reset() {
	*x = Certificate{}
	mi := &file_proto_pi_controller_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Certificate) ProtoMessage() {}

func (x *Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Certificate.ProtoReflect.Descriptor instead.
func (*Certificate) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{41}
}

func (x *Certificate) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Certificate) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Certificate) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *Certificate) GetType() CertificateType {
	if x != nil {
		return x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *Certificate) GetStatus() CertificateStatus {
	if x != nil {
		return x.Status
	}
	return CertificateStatus_CERTIFICATE_STATUS_UNSPECIFIED
}

func (x *Certificate) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Certificate) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *Certificate) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *Certificate) GetNotAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.NotAfter
	}
	return nil
}

func (x *Certificate) GetSans() []string {
	if x != nil {
		return x.Sans
	}
	return nil
}

func (x *Certificate) GetKeyUsage() []string {
	if x != nil {
		return x.KeyUsage
	}
	return nil
}

func (x *Certificate) GetExtKeyUsage() []string {
	if x != nil {
		return x.ExtKeyUsage
	}
	return nil
}

func (x *Certificate) GetBackend() CertificateBackend {
	if x != nil {
		return x.Backend
	}
	return CertificateBackend_CERTIFICATE_BACKEND_UNSPECIFIED
}

func (x *Certificate) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *Certificate) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *Certificate) GetAutoRenew() bool {
	if x != nil {
		return x.AutoRenew
	}
	return false
}

func (x *Certificate) GetRevokedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RevokedAt
	}
	return nil
}

func (x *Certificate) GetRevokedReason() string {
	if x != nil && x.RevokedReason != nil {
		return *x.RevokedReason
	}
	return ""
}

func (x *Certificate) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Certificate) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CAInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type               CAType                 `protobuf:"varint,3,opt,name=type,proto3,enum=pi_controller.CAType" json:"type,omitempty"`
	Backend            CertificateBackend     `protobuf:"varint,4,opt,name=backend,proto3,enum=pi_controller.CertificateBackend" json:"backend,omitempty"`
	Status             CAStatus               `protobuf:"varint,5,opt,name=status,proto3,enum=pi_controller.CAStatus" json:"status,omitempty"`
	Subject            string                 `protobuf:"bytes,6,opt,name=subject,proto3" json:"subject,omitempty"`
	SerialNumber       string                 `protobuf:"bytes,7,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	NotBefore          *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	NotAfter           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	CertificatesIssued int32                  `protobuf:"varint,10,opt,name=certificates_issued,json=certificatesIssued,proto3" json:"certificates_issued,omitempty"`
	CertificatesActive int32                  `protobuf:"varint,11,opt,name=certificates_active,json=certificatesActive,proto3" json:"certificates_active,omitempty"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *CAInfo) Reset() {
	*x = CAInfo{}
	mi := &file_proto_pi_controller_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CAInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CAInfo) ProtoMessage() {}

func (x *CAInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CAInfo.ProtoReflect.Descriptor instead.
func (*CAInfo) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{42}
}

func (x *CAInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CAInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CAInfo) GetType() CAType {
	if x != nil {
		return x.Type
	}
	return CAType_CA_TYPE_UNSPECIFIED
}

func (x *CAInfo) GetBackend() CertificateBackend {
	if x != nil {
		return x.Backend
	}
	return CertificateBackend_CERTIFICATE_BACKEND_UNSPECIFIED
}

func (x *CAInfo) GetStatus() CAStatus {
	if x != nil {
		return x.Status
	}
	return CAStatus_CA_STATUS_UNSPECIFIED
}

func (x *CAInfo) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CAInfo) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *CAInfo) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *CAInfo) GetNotAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.NotAfter
	}
	return nil
}

func (x *CAInfo) GetCertificatesIssued() int32 {
	if x != nil {
		return x.CertificatesIssued
	}
	return 0
}

func (x *CAInfo) GetCertificatesActive() int32 {
	if x != nil {
		return x.CertificatesActive
	}
	return 0
}

func (x *CAInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CAInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CommonName     string                 `protobuf:"bytes,2,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	Type           CertificateType        `protobuf:"varint,3,opt,name=type,proto3,enum=pi_controller.CertificateType" json:"type,omitempty"`
	Status         CSRStatus              `protobuf:"varint,4,opt,name=status,proto3,enum=pi_controller.CSRStatus" json:"status,omitempty"`
	Sans           []string               `protobuf:"bytes,5,rep,name=sans,proto3" json:"sans,omitempty"`
	ValidityPeriod string                 `protobuf:"bytes,6,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty"`
	KeyUsage       []string               `protobuf:"bytes,7,rep,name=key_usage,json=keyUsage,proto3" json:"key_usage,omitempty"`
	ExtKeyUsage    []string               `protobuf:"bytes,8,rep,name=ext_key_usage,json=extKeyUsage,proto3" json:"ext_key_usage,omitempty"`
	NodeId         *uint32                `protobuf:"varint,9,opt,name=node_id,json=nodeId,proto3,oneof" json:"node_id,omitempty"`
	ClusterId      *uint32                `protobuf:"varint,10,opt,name=cluster_id,json=clusterId,proto3,oneof" json:"cluster_id,omitempty"`
	ProcessedAt    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=processed_at,json=processedAt,proto3,oneof" json:"processed_at,omitempty"`
	CertificateId  *uint32                `protobuf:"varint,12,opt,name=certificate_id,json=certificateId,proto3,oneof" json:"certificate_id,omitempty"`
	FailureReason  *string                `protobuf:"bytes,13,opt,name=failure_reason,json=failureReason,proto3,oneof" json:"failure_reason,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *CertificateRequest) Reset() {
	*x = CertificateRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateRequest) ProtoMessage() {}

func (x *CertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateRequest.ProtoReflect.Descriptor instead.
func (*CertificateRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{43}
}

func (x *CertificateRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CertificateRequest) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *CertificateRequest) GetType() CertificateType {
	if x != nil {
		return x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *CertificateRequest) GetStatus() CSRStatus {
	if x != nil {
		return x.Status
	}
	return CSRStatus_CSR_STATUS_UNSPECIFIED
}

func (x *CertificateRequest) GetSans() []string {
	if x != nil {
		return x.Sans
	}
	return nil
}

func (x *CertificateRequest) GetValidityPeriod() string {
	if x != nil {
		return x.ValidityPeriod
	}
	return ""
}

func (x *CertificateRequest) GetKeyUsage() []string {
	if x != nil {
		return x.KeyUsage
	}
	return nil
}

func (x *CertificateRequest) GetExtKeyUsage() []string {
	if x != nil {
		return x.ExtKeyUsage
	}
	return nil
}

func (x *CertificateRequest) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *CertificateRequest) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *CertificateRequest) GetProcessedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessedAt
	}
	return nil
}

func (x *CertificateRequest) GetCertificateId() uint32 {
	if x != nil && x.CertificateId != nil {
		return *x.CertificateId
	}
	return 0
}

func (x *CertificateRequest) GetFailureReason() string {
	if x != nil && x.FailureReason != nil {
		return *x.FailureReason
	}
	return ""
}

func (x *CertificateRequest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CertificateRequest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CertificateValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid        bool                   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Expired      bool                   `protobuf:"varint,2,opt,name=expired,proto3" json:"expired,omitempty"`
	Revoked      bool                   `protobuf:"varint,3,opt,name=revoked,proto3" json:"revoked,omitempty"`
	NotBefore    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	NotAfter     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
	SerialNumber string                 `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	Subject      string                 `protobuf:"bytes,7,opt,name=subject,proto3" json:"subject,omitempty"`
	Issuer       string                 `protobuf:"bytes,8,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Errors       []string               `protobuf:"bytes,9,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *CertificateValidation) Reset() {
	*x = CertificateValidation{}
	mi := &file_proto_pi_controller_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateValidation) ProtoMessage() {}

func (x *CertificateValidation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateValidation.ProtoReflect.Descriptor instead.
func (*CertificateValidation) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{44}
}

func (x *CertificateValidation) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *CertificateValidation) GetExpired() bool {
	if x != nil {
		return x.Expired
	}
	return false
}

func (x *CertificateValidation) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *CertificateValidation) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *CertificateValidation) GetNotAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.NotAfter
	}
	return nil
}

func (x *CertificateValidation) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *CertificateValidation) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CertificateValidation) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *CertificateValidation) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type CertificateStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCertificates        int64   `protobuf:"varint,1,opt,name=total_certificates,json=totalCertificates,proto3" json:"total_certificates,omitempty"`
	ActiveCertificates       int64   `protobuf:"varint,2,opt,name=active_certificates,json=activeCertificates,proto3" json:"active_certificates,omitempty"`
	ExpiredCertificates      int64   `protobuf:"varint,3,opt,name=expired_certificates,json=expiredCertificates,proto3" json:"expired_certificates,omitempty"`
	RevokedCertificates      int64   `protobuf:"varint,4,opt,name=revoked_certificates,json=revokedCertificates,proto3" json:"revoked_certificates,omitempty"`
	CertificatesIssued_24H   int64   `protobuf:"varint,5,opt,name=certificates_issued_24h,json=certificatesIssued24h,proto3" json:"certificates_issued_24h,omitempty"`
	CertificatesExpiring_30D int64   `protobuf:"varint,6,opt,name=certificates_expiring_30d,json=certificatesExpiring30d,proto3" json:"certificates_expiring_30d,omitempty"`
	CaInfo                   *CAInfo `protobuf:"bytes,7,opt,name=ca_info,json=caInfo,proto3" json:"ca_info,omitempty"`
}

func (x *CertificateStats) Reset() {
	*x = CertificateStats{}
	mi := &file_proto_pi_controller_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateStats) ProtoMessage() {}

func (x *CertificateStats) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateStats.ProtoReflect.Descriptor instead.
func (*CertificateStats) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{45}
}

func (x *CertificateStats) GetTotalCertificates() int64 {
	if x != nil {
		return x.TotalCertificates
	}
	return 0
}

func (x *CertificateStats) GetActiveCertificates() int64 {
	if x != nil {
		return x.ActiveCertificates
	}
	return 0
}

func (x *CertificateStats) GetExpiredCertificates() int64 {
	if x != nil {
		return x.ExpiredCertificates
	}
	return 0
}

func (x *CertificateStats) GetRevokedCertificates() int64 {
	if x != nil {
		return x.RevokedCertificates
	}
	return 0
}

func (x *CertificateStats) GetCertificatesIssued_24H() int64 {
	if x != nil {
		return x.CertificatesIssued_24H
	}
	return 0
}

func (x *CertificateStats) GetCertificatesExpiring_30D() int64 {
	if x != nil {
		return x.CertificatesExpiring_30D
	}
	return 0
}

func (x *CertificateStats) GetCaInfo() *CAInfo {
	if x != nil {
		return x.CaInfo
	}
	return nil
}

type InitializeCARequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitializeCARequest) Reset() {
	*x = InitializeCARequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitializeCARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeCARequest) ProtoMessage() {}

func (x *InitializeCARequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeCARequest.ProtoReflect.Descriptor instead.
func (*InitializeCARequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{46}
}

type InitializeCAResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CaInfo  *CAInfo `protobuf:"bytes,3,opt,name=ca_info,json=caInfo,proto3" json:"ca_info,omitempty"`
}

func (x *InitializeCAResponse) Reset() {
	*x = InitializeCAResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitializeCAResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeCAResponse) ProtoMessage() {}

func (x *InitializeCAResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeCAResponse.ProtoReflect.Descriptor instead.
func (*InitializeCAResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{47}
}

func (x *InitializeCAResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InitializeCAResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InitializeCAResponse) GetCaInfo() *CAInfo {
	if x != nil {
		return x.CaInfo
	}
	return nil
}

type GetCAInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCAInfoRequest) Reset() {
	*x = GetCAInfoRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCAInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCAInfoRequest) ProtoMessage() {}

func (x *GetCAInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCAInfoRequest.ProtoReflect.Descriptor instead.
func (*GetCAInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{48}
}

type GetCACertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCACertificateRequest) Reset() {
	*x = GetCACertificateRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCACertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCACertificateRequest) ProtoMessage() {}

func (x *GetCACertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCACertificateRequest.ProtoReflect.Descriptor instead.
func (*GetCACertificateRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{49}
}

type GetCACertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificatePem string                 `protobuf:"bytes,1,opt,name=certificate_pem,json=certificatePem,proto3" json:"certificate_pem,omitempty"`
	SerialNumber   string                 `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	NotBefore      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	NotAfter       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=not_after,json=notAfter,proto3" json:"not_after,omitempty"`
}

func (x *GetCACertificateResponse) Reset() {
	*x = GetCACertificateResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCACertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCACertificateResponse) ProtoMessage() {}

func (x *GetCACertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCACertificateResponse.ProtoReflect.Descriptor instead.
func (*GetCACertificateResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{50}
}

func (x *GetCACertificateResponse) GetCertificatePem() string {
	if x != nil {
		return x.CertificatePem
	}
	return ""
}

func (x *GetCACertificateResponse) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *GetCACertificateResponse) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *GetCACertificateResponse) GetNotAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.NotAfter
	}
	return nil
}

type IssueCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonName     string          `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	Type           CertificateType `protobuf:"varint,2,opt,name=type,proto3,enum=pi_controller.CertificateType" json:"type,omitempty"`
	Sans           []string        `protobuf:"bytes,3,rep,name=sans,proto3" json:"sans,omitempty"`
	ValidityPeriod string          `protobuf:"bytes,4,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty"`
	KeyUsage       []string        `protobuf:"bytes,5,rep,name=key_usage,json=keyUsage,proto3" json:"key_usage,omitempty"`
	ExtKeyUsage    []string        `protobuf:"bytes,6,rep,name=ext_key_usage,json=extKeyUsage,proto3" json:"ext_key_usage,omitempty"`
	NodeId         *uint32         `protobuf:"varint,7,opt,name=node_id,json=nodeId,proto3,oneof" json:"node_id,omitempty"`
	ClusterId      *uint32         `protobuf:"varint,8,opt,name=cluster_id,json=clusterId,proto3,oneof" json:"cluster_id,omitempty"`
	AutoRenew      bool            `protobuf:"varint,9,opt,name=auto_renew,json=autoRenew,proto3" json:"auto_renew,omitempty"`
}

func (x *IssueCertificateRequest) Reset() {
	*x = IssueCertificateRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCertificateRequest) ProtoMessage() {}

func (x *IssueCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCertificateRequest.ProtoReflect.Descriptor instead.
func (*IssueCertificateRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{51}
}

func (x *IssueCertificateRequest) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *IssueCertificateRequest) GetType() CertificateType {
	if x != nil {
		return x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *IssueCertificateRequest) GetSans() []string {
	if x != nil {
		return x.Sans
	}
	return nil
}

func (x *IssueCertificateRequest) GetValidityPeriod() string {
	if x != nil {
		return x.ValidityPeriod
	}
	return ""
}

func (x *IssueCertificateRequest) GetKeyUsage() []string {
	if x != nil {
		return x.KeyUsage
	}
	return nil
}

func (x *IssueCertificateRequest) GetExtKeyUsage() []string {
	if x != nil {
		return x.ExtKeyUsage
	}
	return nil
}

func (x *IssueCertificateRequest) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *IssueCertificateRequest) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *IssueCertificateRequest) GetAutoRenew() bool {
	if x != nil {
		return x.AutoRenew
	}
	return false
}

type GetCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//
	//	*GetCertificateRequest_Id
	//	*GetCertificateRequest_SerialNumber
	Identifier isGetCertificateRequest_Identifier `protobuf_oneof:"identifier"`
}

func (x *GetCertificateRequest) Reset() {
	*x = GetCertificateRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificateRequest) ProtoMessage() {}

func (x *GetCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificateRequest.ProtoReflect.Descriptor instead.
func (*GetCertificateRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{52}
}

func (m *GetCertificateRequest) GetIdentifier() isGetCertificateRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *GetCertificateRequest) GetId() uint32 {
	if x, ok := x.GetIdentifier().(*GetCertificateRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *GetCertificateRequest) GetSerialNumber() string {
	if x, ok := x.GetIdentifier().(*GetCertificateRequest_SerialNumber); ok {
		return x.SerialNumber
	}
	return ""
}

type isGetCertificateRequest_Identifier interface {
	isGetCertificateRequest_Identifier()
}

type GetCertificateRequest_Id struct {
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type GetCertificateRequest_SerialNumber struct {
	SerialNumber string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3,oneof"`
}

func (*GetCertificateRequest_Id) isGetCertificateRequest_Identifier() {}

func (*GetCertificateRequest_SerialNumber) isGetCertificateRequest_Identifier() {}

type ListCertificatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int32               `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int32               `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Type      *CertificateType    `protobuf:"varint,3,opt,name=type,proto3,enum=pi_controller.CertificateType,oneof" json:"type,omitempty"`
	Status    *CertificateStatus  `protobuf:"varint,4,opt,name=status,proto3,enum=pi_controller.CertificateStatus,oneof" json:"status,omitempty"`
	NodeId    *uint32             `protobuf:"varint,5,opt,name=node_id,json=nodeId,proto3,oneof" json:"node_id,omitempty"`
	ClusterId *uint32             `protobuf:"varint,6,opt,name=cluster_id,json=clusterId,proto3,oneof" json:"cluster_id,omitempty"`
	Backend   *CertificateBackend `protobuf:"varint,7,opt,name=backend,proto3,enum=pi_controller.CertificateBackend,oneof" json:"backend,omitempty"`
}

func (x *ListCertificatesRequest) Reset() {
	*x = ListCertificatesRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCertificatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCertificatesRequest) ProtoMessage() {}

func (x *ListCertificatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCertificatesRequest.ProtoReflect.Descriptor instead.
func (*ListCertificatesRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{53}
}

func (x *ListCertificatesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCertificatesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCertificatesRequest) GetType() CertificateType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *ListCertificatesRequest) GetStatus() CertificateStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return CertificateStatus_CERTIFICATE_STATUS_UNSPECIFIED
}

func (x *ListCertificatesRequest) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *ListCertificatesRequest) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

func (x *ListCertificatesRequest) GetBackend() CertificateBackend {
	if x != nil && x.Backend != nil {
		return *x.Backend
	}
	return CertificateBackend_CERTIFICATE_BACKEND_UNSPECIFIED
}

type ListCertificatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificates []*Certificate `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
	TotalCount   int32          `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListCertificatesResponse) Reset() {
	*x = ListCertificatesResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCertificatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCertificatesResponse) ProtoMessage() {}

func (x *ListCertificatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCertificatesResponse.ProtoReflect.Descriptor instead.
func (*ListCertificatesResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{54}
}

func (x *ListCertificatesResponse) GetCertificates() []*Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *ListCertificatesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type RenewCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RenewCertificateRequest) Reset() {
	*x = RenewCertificateRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RenewCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenewCertificateRequest) ProtoMessage() {}

func (x *RenewCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenewCertificateRequest.ProtoReflect.Descriptor instead.
func (*RenewCertificateRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{55}
}

func (x *RenewCertificateRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RevokeCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RevokeCertificateRequest) Reset() {
	*x = RevokeCertificateRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeCertificateRequest) ProtoMessage() {}

func (x *RevokeCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeCertificateRequest.ProtoReflect.Descriptor instead.
func (*RevokeCertificateRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{56}
}

func (x *RevokeCertificateRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RevokeCertificateRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type RevokeCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RevokeCertificateResponse) Reset() {
	*x = RevokeCertificateResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeCertificateResponse) ProtoMessage() {}

func (x *RevokeCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeCertificateResponse.ProtoReflect.Descriptor instead.
func (*RevokeCertificateResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{57}
}

func (x *RevokeCertificateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RevokeCertificateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ValidateCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertificatePem string `protobuf:"bytes,1,opt,name=certificate_pem,json=certificatePem,proto3" json:"certificate_pem,omitempty"`
}

func (x *ValidateCertificateRequest) Reset() {
	*x = ValidateCertificateRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateCertificateRequest) ProtoMessage() {}

func (x *ValidateCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateCertificateRequest.ProtoReflect.Descriptor instead.
func (*ValidateCertificateRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{58}
}

func (x *ValidateCertificateRequest) GetCertificatePem() string {
	if x != nil {
		return x.CertificatePem
	}
	return ""
}

type ValidateCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validation *CertificateValidation `protobuf:"bytes,1,opt,name=validation,proto3" json:"validation,omitempty"`
}

func (x *ValidateCertificateResponse) Reset() {
	*x = ValidateCertificateResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateCertificateResponse) ProtoMessage() {}

func (x *ValidateCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateCertificateResponse.ProtoReflect.Descriptor instead.
func (*ValidateCertificateResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{59}
}

func (x *ValidateCertificateResponse) GetValidation() *CertificateValidation {
	if x != nil {
		return x.Validation
	}
	return nil
}

type CreateCertificateRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonName     string          `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	Type           CertificateType `protobuf:"varint,2,opt,name=type,proto3,enum=pi_controller.CertificateType" json:"type,omitempty"`
	CsrPem         string          `protobuf:"bytes,3,opt,name=csr_pem,json=csrPem,proto3" json:"csr_pem,omitempty"`
	Sans           []string        `protobuf:"bytes,4,rep,name=sans,proto3" json:"sans,omitempty"`
	ValidityPeriod string          `protobuf:"bytes,5,opt,name=validity_period,json=validityPeriod,proto3" json:"validity_period,omitempty"`
	KeyUsage       []string        `protobuf:"bytes,6,rep,name=key_usage,json=keyUsage,proto3" json:"key_usage,omitempty"`
	ExtKeyUsage    []string        `protobuf:"bytes,7,rep,name=ext_key_usage,json=extKeyUsage,proto3" json:"ext_key_usage,omitempty"`
	NodeId         *uint32         `protobuf:"varint,8,opt,name=node_id,json=nodeId,proto3,oneof" json:"node_id,omitempty"`
	ClusterId      *uint32         `protobuf:"varint,9,opt,name=cluster_id,json=clusterId,proto3,oneof" json:"cluster_id,omitempty"`
}

func (x *CreateCertificateRequestRequest) Reset() {
	*x = CreateCertificateRequestRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCertificateRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCertificateRequestRequest) ProtoMessage() {}

func (x *CreateCertificateRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCertificateRequestRequest.ProtoReflect.Descriptor instead.
func (*CreateCertificateRequestRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{60}
}

func (x *CreateCertificateRequestRequest) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *CreateCertificateRequestRequest) GetType() CertificateType {
	if x != nil {
		return x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *CreateCertificateRequestRequest) GetCsrPem() string {
	if x != nil {
		return x.CsrPem
	}
	return ""
}

func (x *CreateCertificateRequestRequest) GetSans() []string {
	if x != nil {
		return x.Sans
	}
	return nil
}

func (x *CreateCertificateRequestRequest) GetValidityPeriod() string {
	if x != nil {
		return x.ValidityPeriod
	}
	return ""
}

func (x *CreateCertificateRequestRequest) GetKeyUsage() []string {
	if x != nil {
		return x.KeyUsage
	}
	return nil
}

func (x *CreateCertificateRequestRequest) GetExtKeyUsage() []string {
	if x != nil {
		return x.ExtKeyUsage
	}
	return nil
}

func (x *CreateCertificateRequestRequest) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *CreateCertificateRequestRequest) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

type ProcessCertificateRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Approve bool   `protobuf:"varint,2,opt,name=approve,proto3" json:"approve,omitempty"`
}

func (x *ProcessCertificateRequestRequest) Reset() {
	*x = ProcessCertificateRequestRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessCertificateRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessCertificateRequestRequest) ProtoMessage() {}

func (x *ProcessCertificateRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessCertificateRequestRequest.ProtoReflect.Descriptor instead.
func (*ProcessCertificateRequestRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{61}
}

func (x *ProcessCertificateRequestRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcessCertificateRequestRequest) GetApprove() bool {
	if x != nil {
		return x.Approve
	}
	return false
}

type ListCertificateRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int32            `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int32            `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Status    *CSRStatus       `protobuf:"varint,3,opt,name=status,proto3,enum=pi_controller.CSRStatus,oneof" json:"status,omitempty"`
	Type      *CertificateType `protobuf:"varint,4,opt,name=type,proto3,enum=pi_controller.CertificateType,oneof" json:"type,omitempty"`
	NodeId    *uint32          `protobuf:"varint,5,opt,name=node_id,json=nodeId,proto3,oneof" json:"node_id,omitempty"`
	ClusterId *uint32          `protobuf:"varint,6,opt,name=cluster_id,json=clusterId,proto3,oneof" json:"cluster_id,omitempty"`
}

func (x *ListCertificateRequestsRequest) Reset() {
	*x = ListCertificateRequestsRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCertificateRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCertificateRequestsRequest) ProtoMessage() {}

func (x *ListCertificateRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCertificateRequestsRequest.ProtoReflect.Descriptor instead.
func (*ListCertificateRequestsRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{62}
}

func (x *ListCertificateRequestsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCertificateRequestsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListCertificateRequestsRequest) GetStatus() CSRStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return CSRStatus_CSR_STATUS_UNSPECIFIED
}

func (x *ListCertificateRequestsRequest) GetType() CertificateType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CertificateType_CERTIFICATE_TYPE_UNSPECIFIED
}

func (x *ListCertificateRequestsRequest) GetNodeId() uint32 {
	if x != nil && x.NodeId != nil {
		return *x.NodeId
	}
	return 0
}

func (x *ListCertificateRequestsRequest) GetClusterId() uint32 {
	if x != nil && x.ClusterId != nil {
		return *x.ClusterId
	}
	return 0
}

type ListCertificateRequestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests   []*CertificateRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	TotalCount int32                 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListCertificateRequestsResponse) Reset() {
	*x = ListCertificateRequestsResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCertificateRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCertificateRequestsResponse) ProtoMessage() {}

func (x *ListCertificateRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCertificateRequestsResponse.ProtoReflect.Descriptor instead.
func (*ListCertificateRequestsResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{63}
}

func (x *ListCertificateRequestsResponse) GetRequests() []*CertificateRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *ListCertificateRequestsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetCertificateStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCertificateStatsRequest) Reset() {
	*x = GetCertificateStatsRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCertificateStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCertificateStatsRequest) ProtoMessage() {}

func (x *GetCertificateStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCertificateStatsRequest.ProtoReflect.Descriptor instead.
func (*GetCertificateStatsRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{64}
}

type CleanupExpiredCertificatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CleanupExpiredCertificatesRequest) Reset() {
	*x = CleanupExpiredCertificatesRequest{}
	mi := &file_proto_pi_controller_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanupExpiredCertificatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupExpiredCertificatesRequest) ProtoMessage() {}

func (x *CleanupExpiredCertificatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupExpiredCertificatesRequest.ProtoReflect.Descriptor instead.
func (*CleanupExpiredCertificatesRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{65}
}

type CleanupExpiredCertificatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CleanedCount int32  `protobuf:"varint,1,opt,name=cleaned_count,json=cleanedCount,proto3" json:"cleaned_count,omitempty"`
	Message      string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CleanupExpiredCertificatesResponse) Reset() {
	*x = CleanupExpiredCertificatesResponse{}
	mi := &file_proto_pi_controller_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanupExpiredCertificatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanupExpiredCertificatesResponse) ProtoMessage() {}

func (x *CleanupExpiredCertificatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_controller_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanupExpiredCertificatesResponse.ProtoReflect.Descriptor instead.
func (*CleanupExpiredCertificatesResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_controller_proto_rawDescGZIP(), []int{66}
}

func (x *CleanupExpiredCertificatesResponse) GetCleanedCount() int32 {
	if x != nil {
		return x.CleanedCount
	}
	return 0
}

func (x *CleanupExpiredCertificatesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_proto_pi_controller_proto protoreflect.FileDescriptor

var file_proto_pi_controller_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x02, 0x0a, 0x07,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6b, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xb2, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x31, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0x84, 0x06, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6b, 0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a,
	0x0c, 0x67, 0x70, 0x69, 0x6f, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b,
	0x67, 0x70, 0x69, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xdb, 0x02, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb9, 0x01, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5f, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xad, 0x06, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x69, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x48,
	0x04, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x08, 0x63,
	0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6b,
	0x75, 0x62, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x0b, 0x6b, 0x75, 0x62, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x6f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0e, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x45, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x17, 0x44, 0x65,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb2, 0x04, 0x0a, 0x0a, 0x47, 0x50,
	0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x75, 0x6c,
	0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x49,
	0x4f, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x75, 0x6c, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47,
	0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x49, 0x4f, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x49, 0x4f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x98,
	0x02, 0x0a, 0x0a, 0x47, 0x50, 0x49, 0x4f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x75, 0x74, 0x79, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x64, 0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70,
	0x69, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70,
	0x69, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x70, 0x69, 0x5f, 0x62, 0x69, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x70, 0x69, 0x42, 0x69, 0x74, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x69, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x70, 0x69, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x70, 0x69, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x70, 0x69, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x32, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x32, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x32, 0x63, 0x5f, 0x62, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x69, 0x32, 0x63, 0x42, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x17, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50,
	0x49, 0x4f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x75,
	0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x49, 0x4f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x26, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x50, 0x49,
	0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x43,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x49, 0x4f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x02,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x78, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x0c, 0x67, 0x70, 0x69, 0x6f, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b,
	0x67, 0x70, 0x69, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf9, 0x03, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x69,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x49, 0x4f,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x75, 0x6c,
	0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x49,
	0x4f, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x03, 0x52, 0x08, 0x70, 0x75, 0x6c,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50,
	0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50,
	0x49, 0x4f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x49, 0x4f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x06, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x50, 0x49,
	0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x21, 0x0a, 0x0f, 0x52, 0x65, 0x61,
	0x64, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x91, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x61, 0x64, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x38, 0x0a, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x11, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x8a, 0x01, 0x0a, 0x0b, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x59, 0x0a, 0x19,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x0e, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x13, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xca, 0x02, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x6f,
	0x5f, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x4f, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x6f, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x6f, 0x41, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x6f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x02, 0x67, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x43, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x02, 0x67, 0x63, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0xee, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x79, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61,
	0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x68,
	0x65, 0x61, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x70,
	0x5f, 0x73, 0x79, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x68, 0x65, 0x61, 0x70,
	0x53, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x75, 0x73,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x68, 0x65, 0x61, 0x70, 0x49, 0x6e, 0x75,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x68, 0x65, 0x61, 0x70, 0x49, 0x64, 0x6c, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x22, 0x75, 0x0a, 0x06, 0x47, 0x43, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x75,
	0x6d, 0x47, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x63, 0x22, 0x89, 0x07, 0x0a, 0x0b, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x6e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x6f,
	0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x61, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74,
	0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x72, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x12, 0x3e, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x09, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0d, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xd0, 0x04, 0x0a, 0x06, 0x43, 0x41, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x43, 0x41, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3b, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x41, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a,
	0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x6f,
	0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xcf, 0x05, 0x0a, 0x12, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x53, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x03, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xc4, 0x02, 0x0a, 0x15, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x39,
	0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x6e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x6f, 0x74,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x22, 0xfc, 0x02, 0x0a, 0x10, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x64, 0x5f, 0x32, 0x34, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x64, 0x32, 0x34, 0x68, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x33, 0x30,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x30, 0x64,
	0x12, 0x2e, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x43, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x15, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x41,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7a, 0x0a, 0x14, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x63, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x41, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x41,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x65, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e,
	0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x22, 0xe8, 0x02, 0x0a, 0x17, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x61, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x65, 0x78, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x81, 0x03, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x02, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x48, 0x04, 0x52, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x22, 0x7b, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0c,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x29, 0x0a,
	0x17, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x18, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x19,
	0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a,
	0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x6d, 0x22, 0x63, 0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xea, 0x02, 0x0a, 0x1f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x73, 0x72, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x73, 0x72, 0x50, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x61, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6e, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x53, 0x52, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x09, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x1f, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1c, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x21, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x63, 0x0a, 0x22, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0xdf, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0xe3, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x12,
	0x1b, 0x0a, 0x17, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x2a, 0x51, 0x0a,
	0x08, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x02,
	0x2a, 0x64, 0x0a, 0x0d, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x47,
	0x50, 0x49, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55,
	0x54, 0x50, 0x55, 0x54, 0x10, 0x02, 0x2a, 0x77, 0x0a, 0x0c, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x75,
	0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x50,
	0x55, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x50,
	0x55, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x50, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x50,
	0x55, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x2a,
	0xbb, 0x01, 0x0a, 0x0e, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x4f, 0x47, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x57, 0x4d, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x50, 0x49,
	0x4f, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50,
	0x49, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x32, 0x43, 0x10, 0x05, 0x2a, 0x72, 0x0a,
	0x0a, 0x47, 0x50, 0x49, 0x4f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x47,
	0x50, 0x49, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x50, 0x49, 0x4f,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x50,
	0x49, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x2a, 0xc3, 0x01, 0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x45, 0x52, 0x54, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x53, 0x48, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x05, 0x2a, 0xf6, 0x01, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x1f, 0x0a, 0x1b, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x06,
	0x2a, 0x77, 0x0a, 0x12, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43,
	0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45,
	0x4e, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x45,
	0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e,
	0x44, 0x5f, 0x56, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x02, 0x2a, 0x4d, 0x0a, 0x06, 0x43, 0x41, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4d,
	0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x81, 0x01, 0x0a, 0x08, 0x43, 0x41, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f,
	0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x88, 0x01, 0x0a,
	0x09, 0x43, 0x53, 0x52, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x53,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x53, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x53, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x53, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x53, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x32, 0xb2, 0x19, 0x0a, 0x13, 0x50, 0x69, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x4c, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x23, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x70, 0x69,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x23, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x2e,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x51, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x60, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x50, 0x49, 0x4f,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x50, 0x49,
	0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47,
	0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x50,
	0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x0f, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x25, 0x2e,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x26, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x50, 0x49,
	0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x50,
	0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64,
	0x47, 0x50, 0x49, 0x4f, 0x12, 0x1e, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x50,
	0x49, 0x4f, 0x12, 0x1f, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47,
	0x50, 0x49, 0x4f, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x69,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x50, 0x49, 0x4f, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x43, 0x41, 0x12, 0x22, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x43, 0x41,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x43, 0x41, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x09,
	0x47, 0x65, 0x74, 0x43, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x41, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x41, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x52,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x69,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x66, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x76, 0x6f, 0x6b, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x29,
	0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x68, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x78,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x29, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x1a,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x75, 0x70, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70,
	0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x75, 0x70, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1c, 0x2e, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x69, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2c, 0x5a, 0x2a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x65, 0x6e, 0x63,
	0x65, 0x72, 0x79, 0x6f, 0x72, 0x6b, 0x2f, 0x70, 0x69, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_pi_controller_proto_rawDescOnce sync.Once
	file_proto_pi_controller_proto_rawDescData = file_proto_pi_controller_proto_rawDesc
)

func file_proto_pi_controller_proto_rawDescGZIP() []byte {
	file_proto_pi_controller_proto_rawDescOnce.Do(func() {
		file_proto_pi_controller_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_pi_controller_proto_rawDescData)
	})
	return file_proto_pi_controller_proto_rawDescData
}

var file_proto_pi_controller_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_proto_pi_controller_proto_msgTypes = make([]protoimpl.MessageInfo, 67)
var file_proto_pi_controller_proto_goTypes = []any{
	(ClusterStatus)(0),                         // 0: pi_controller.ClusterStatus
	(NodeStatus)(0),                            // 1: pi_controller.NodeStatus
	(NodeRole)(0),                              // 2: pi_controller.NodeRole
	(GPIODirection)(0),                         // 3: pi_controller.GPIODirection
	(GPIOPullMode)(0),                          // 4: pi_controller.GPIOPullMode
	(GPIODeviceType)(0),                        // 5: pi_controller.GPIODeviceType
	(GPIOStatus)(0),                            // 6: pi_controller.GPIOStatus
	(CertificateType)(0),                       // 7: pi_controller.CertificateType
	(CertificateStatus)(0),                     // 8: pi_controller.CertificateStatus
	(CertificateBackend)(0),                    // 9: pi_controller.CertificateBackend
	(CAType)(0),                                // 10: pi_controller.CAType
	(CAStatus)(0),                              // 11: pi_controller.CAStatus
	(CSRStatus)(0),                             // 12: pi_controller.CSRStatus
	(*Cluster)(nil),                            // 13: pi_controller.Cluster
	(*CreateClusterRequest)(nil),               // 14: pi_controller.CreateClusterRequest
	(*GetClusterRequest)(nil),                  // 15: pi_controller.GetClusterRequest
	(*ListClustersRequest)(nil),                // 16: pi_controller.ListClustersRequest
	(*ListClustersResponse)(nil),               // 17: pi_controller.ListClustersResponse
	(*UpdateClusterRequest)(nil),               // 18: pi_controller.UpdateClusterRequest
	(*DeleteClusterRequest)(nil),               // 19: pi_controller.DeleteClusterRequest
	(*DeleteClusterResponse)(nil),              // 20: pi_controller.DeleteClusterResponse
	(*Node)(nil),                               // 21: pi_controller.Node
	(*CreateNodeRequest)(nil),                  // 22: pi_controller.CreateNodeRequest
	(*GetNodeRequest)(nil),                     // 23: pi_controller.GetNodeRequest
	(*ListNodesRequest)(nil),                   // 24: pi_controller.ListNodesRequest
	(*ListNodesResponse)(nil),                  // 25: pi_controller.ListNodesResponse
	(*UpdateNodeRequest)(nil),                  // 26: pi_controller.UpdateNodeRequest
	(*DeleteNodeRequest)(nil),                  // 27: pi_controller.DeleteNodeRequest
	(*DeleteNodeResponse)(nil),                 // 28: pi_controller.DeleteNodeResponse
	(*ProvisionNodeRequest)(nil),               // 29: pi_controller.ProvisionNodeRequest
	(*ProvisionNodeResponse)(nil),              // 30: pi_controller.ProvisionNodeResponse
	(*DeprovisionNodeRequest)(nil),             // 31: pi_controller.DeprovisionNodeRequest
	(*DeprovisionNodeResponse)(nil),            // 32: pi_controller.DeprovisionNodeResponse
	(*GPIODevice)(nil),                         // 33: pi_controller.GPIODevice
	(*GPIOConfig)(nil),                         // 34: pi_controller.GPIOConfig
	(*CreateGPIODeviceRequest)(nil),            // 35: pi_controller.CreateGPIODeviceRequest
	(*GetGPIODeviceRequest)(nil),               // 36: pi_controller.GetGPIODeviceRequest
	(*ListGPIODevicesRequest)(nil),             // 37: pi_controller.ListGPIODevicesRequest
	(*ListGPIODevicesResponse)(nil),            // 38: pi_controller.ListGPIODevicesResponse
	(*UpdateGPIODeviceRequest)(nil),            // 39: pi_controller.UpdateGPIODeviceRequest
	(*DeleteGPIODeviceRequest)(nil),            // 40: pi_controller.DeleteGPIODeviceRequest
	(*DeleteGPIODeviceResponse)(nil),           // 41: pi_controller.DeleteGPIODeviceResponse
	(*ReadGPIORequest)(nil),                    // 42: pi_controller.ReadGPIORequest
	(*ReadGPIOResponse)(nil),                   // 43: pi_controller.ReadGPIOResponse
	(*WriteGPIORequest)(nil),                   // 44: pi_controller.WriteGPIORequest
	(*WriteGPIOResponse)(nil),                  // 45: pi_controller.WriteGPIOResponse
	(*GPIOReading)(nil),                        // 46: pi_controller.GPIOReading
	(*StreamGPIOReadingsRequest)(nil),          // 47: pi_controller.StreamGPIOReadingsRequest
	(*HealthRequest)(nil),                      // 48: pi_controller.HealthRequest
	(*HealthResponse)(nil),                     // 49: pi_controller.HealthResponse
	(*SystemInfoRequest)(nil),                  // 50: pi_controller.SystemInfoRequest
	(*SystemInfoResponse)(nil),                 // 51: pi_controller.SystemInfoResponse
	(*MemoryInfo)(nil),                         // 52: pi_controller.MemoryInfo
	(*GCInfo)(nil),                             // 53: pi_controller.GCInfo
	(*Certificate)(nil),                        // 54: pi_controller.Certificate
	(*CAInfo)(nil),                             // 55: pi_controller.CAInfo
	(*CertificateRequest)(nil),                 // 56: pi_controller.CertificateRequest
	(*CertificateValidation)(nil),              // 57: pi_controller.CertificateValidation
	(*CertificateStats)(nil),                   // 58: pi_controller.CertificateStats
	(*InitializeCARequest)(nil),                // 59: pi_controller.InitializeCARequest
	(*InitializeCAResponse)(nil),               // 60: pi_controller.InitializeCAResponse
	(*GetCAInfoRequest)(nil),                   // 61: pi_controller.GetCAInfoRequest
	(*GetCACertificateRequest)(nil),            // 62: pi_controller.GetCACertificateRequest
	(*GetCACertificateResponse)(nil),           // 63: pi_controller.GetCACertificateResponse
	(*IssueCertificateRequest)(nil),            // 64: pi_controller.IssueCertificateRequest
	(*GetCertificateRequest)(nil),              // 65: pi_controller.GetCertificateRequest
	(*ListCertificatesRequest)(nil),            // 66: pi_controller.ListCertificatesRequest
	(*ListCertificatesResponse)(nil),           // 67: pi_controller.ListCertificatesResponse
	(*RenewCertificateRequest)(nil),            // 68: pi_controller.RenewCertificateRequest
	(*RevokeCertificateRequest)(nil),           // 69: pi_controller.RevokeCertificateRequest
	(*RevokeCertificateResponse)(nil),          // 70: pi_controller.RevokeCertificateResponse
	(*ValidateCertificateRequest)(nil),         // 71: pi_controller.ValidateCertificateRequest
	(*ValidateCertificateResponse)(nil),        // 72: pi_controller.ValidateCertificateResponse
	(*CreateCertificateRequestRequest)(nil),    // 73: pi_controller.CreateCertificateRequestRequest
	(*ProcessCertificateRequestRequest)(nil),   // 74: pi_controller.ProcessCertificateRequestRequest
	(*ListCertificateRequestsRequest)(nil),     // 75: pi_controller.ListCertificateRequestsRequest
	(*ListCertificateRequestsResponse)(nil),    // 76: pi_controller.ListCertificateRequestsResponse
	(*GetCertificateStatsRequest)(nil),         // 77: pi_controller.GetCertificateStatsRequest
	(*CleanupExpiredCertificatesRequest)(nil),  // 78: pi_controller.CleanupExpiredCertificatesRequest
	(*CleanupExpiredCertificatesResponse)(nil), // 79: pi_controller.CleanupExpiredCertificatesResponse
	(*timestamppb.Timestamp)(nil),              // 80: google.protobuf.Timestamp
}
var file_proto_pi_controller_proto_depIdxs = []int32{
	0,   // 0: pi_controller.Cluster.status:type_name -> pi_controller.ClusterStatus
	80,  // 1: pi_controller.Cluster.created_at:type_name -> google.protobuf.Timestamp
	80,  // 2: pi_controller.Cluster.updated_at:type_name -> google.protobuf.Timestamp
	21,  // 3: pi_controller.Cluster.nodes:type_name -> pi_controller.Node
	13,  // 4: pi_controller.ListClustersResponse.clusters:type_name -> pi_controller.Cluster
	0,   // 5: pi_controller.UpdateClusterRequest.status:type_name -> pi_controller.ClusterStatus
	1,   // 6: pi_controller.Node.status:type_name -> pi_controller.NodeStatus
	2,   // 7: pi_controller.Node.role:type_name -> pi_controller.NodeRole
	80,  // 8: pi_controller.Node.last_seen:type_name -> google.protobuf.Timestamp
	80,  // 9: pi_controller.Node.created_at:type_name -> google.protobuf.Timestamp
	80,  // 10: pi_controller.Node.updated_at:type_name -> google.protobuf.Timestamp
	33,  // 11: pi_controller.Node.gpio_devices:type_name -> pi_controller.GPIODevice
	2,   // 12: pi_controller.CreateNodeRequest.role:type_name -> pi_controller.NodeRole
	1,   // 13: pi_controller.ListNodesRequest.status:type_name -> pi_controller.NodeStatus
	21,  // 14: pi_controller.ListNodesResponse.nodes:type_name -> pi_controller.Node
	1,   // 15: pi_controller.UpdateNodeRequest.status:type_name -> pi_controller.NodeStatus
	2,   // 16: pi_controller.UpdateNodeRequest.role:type_name -> pi_controller.NodeRole
	3,   // 17: pi_controller.GPIODevice.direction:type_name -> pi_controller.GPIODirection
	4,   // 18: pi_controller.GPIODevice.pull_mode:type_name -> pi_controller.GPIOPullMode
	5,   // 19: pi_controller.GPIODevice.device_type:type_name -> pi_controller.GPIODeviceType
	6,   // 20: pi_controller.GPIODevice.status:type_name -> pi_controller.GPIOStatus
	34,  // 21: pi_controller.GPIODevice.config:type_name -> pi_controller.GPIOConfig
	80,  // 22: pi_controller.GPIODevice.created_at:type_name -> google.protobuf.Timestamp
	80,  // 23: pi_controller.GPIODevice.updated_at:type_name -> google.protobuf.Timestamp
	3,   // 24: pi_controller.CreateGPIODeviceRequest.direction:type_name -> pi_controller.GPIODirection
	4,   // 25: pi_controller.CreateGPIODeviceRequest.pull_mode:type_name -> pi_controller.GPIOPullMode
	5,   // 26: pi_controller.CreateGPIODeviceRequest.device_type:type_name -> pi_controller.GPIODeviceType
	34,  // 27: pi_controller.CreateGPIODeviceRequest.config:type_name -> pi_controller.GPIOConfig
	5,   // 28: pi_controller.ListGPIODevicesRequest.device_type:type_name -> pi_controller.GPIODeviceType
	6,   // 29: pi_controller.ListGPIODevicesRequest.status:type_name -> pi_controller.GPIOStatus
	33,  // 30: pi_controller.ListGPIODevicesResponse.gpio_devices:type_name -> pi_controller.GPIODevice
	3,   // 31: pi_controller.UpdateGPIODeviceRequest.direction:type_name -> pi_controller.GPIODirection
	4,   // 32: pi_controller.UpdateGPIODeviceRequest.pull_mode:type_name -> pi_controller.GPIOPullMode
	5,   // 33: pi_controller.UpdateGPIODeviceRequest.device_type:type_name -> pi_controller.GPIODeviceType
	6,   // 34: pi_controller.UpdateGPIODeviceRequest.status:type_name -> pi_controller.GPIOStatus
	34,  // 35: pi_controller.UpdateGPIODeviceRequest.config:type_name -> pi_controller.GPIOConfig
	80,  // 36: pi_controller.ReadGPIOResponse.timestamp:type_name -> google.protobuf.Timestamp
	80,  // 37: pi_controller.WriteGPIOResponse.timestamp:type_name -> google.protobuf.Timestamp
	80,  // 38: pi_controller.GPIOReading.timestamp:type_name -> google.protobuf.Timestamp
	80,  // 39: pi_controller.HealthResponse.timestamp:type_name -> google.protobuf.Timestamp
	52,  // 40: pi_controller.SystemInfoResponse.memory:type_name -> pi_controller.MemoryInfo
	53,  // 41: pi_controller.SystemInfoResponse.gc:type_name -> pi_controller.GCInfo
	80,  // 42: pi_controller.SystemInfoResponse.timestamp:type_name -> google.protobuf.Timestamp
	80,  // 43: pi_controller.GCInfo.last_gc:type_name -> google.protobuf.Timestamp
	7,   // 44: pi_controller.Certificate.type:type_name -> pi_controller.CertificateType
	8,   // 45: pi_controller.Certificate.status:type_name -> pi_controller.CertificateStatus
	80,  // 46: pi_controller.Certificate.not_before:type_name -> google.protobuf.Timestamp
	80,  // 47: pi_controller.Certificate.not_after:type_name -> google.protobuf.Timestamp
	9,   // 48: pi_controller.Certificate.backend:type_name -> pi_controller.CertificateBackend
	80,  // 49: pi_controller.Certificate.revoked_at:type_name -> google.protobuf.Timestamp
	80,  // 50: pi_controller.Certificate.created_at:type_name -> google.protobuf.Timestamp
	80,  // 51: pi_controller.Certificate.updated_at:type_name -> google.protobuf.Timestamp
	10,  // 52: pi_controller.CAInfo.type:type_name -> pi_controller.CAType
	9,   // 53: pi_controller.CAInfo.backend:type_name -> pi_controller.CertificateBackend
	11,  // 54: pi_controller.CAInfo.status:type_name -> pi_controller.CAStatus
	80,  // 55: pi_controller.CAInfo.not_before:type_name -> google.protobuf.Timestamp
	80,  // 56: pi_controller.CAInfo.not_after:type_name -> google.protobuf.Timestamp
	80,  // 57: pi_controller.CAInfo.created_at:type_name -> google.protobuf.Timestamp
	80,  // 58: pi_controller.CAInfo.updated_at:type_name -> google.protobuf.Timestamp
	7,   // 59: pi_controller.CertificateRequest.type:type_name -> pi_controller.CertificateType
	12,  // 60: pi_controller.CertificateRequest.status:type_name -> pi_controller.CSRStatus
	80,  // 61: pi_controller.CertificateRequest.processed_at:type_name -> google.protobuf.Timestamp
	80,  // 62: pi_controller.CertificateRequest.created_at:type_name -> google.protobuf.Timestamp
	80,  // 63: pi_controller.CertificateRequest.updated_at:type_name -> google.protobuf.Timestamp
	80,  // 64: pi_controller.CertificateValidation.not_before:type_name -> google.protobuf.Timestamp
	80,  // 65: pi_controller.CertificateValidation.not_after:type_name -> google.protobuf.Timestamp
	55,  // 66: pi_controller.CertificateStats.ca_info:type_name -> pi_controller.CAInfo
	55,  // 67: pi_controller.InitializeCAResponse.ca_info:type_name -> pi_controller.CAInfo
	80,  // 68: pi_controller.GetCACertificateResponse.not_before:type_name -> google.protobuf.Timestamp
	80,  // 69: pi_controller.GetCACertificateResponse.not_after:type_name -> google.protobuf.Timestamp
	7,   // 70: pi_controller.IssueCertificateRequest.type:type_name -> pi_controller.CertificateType
	7,   // 71: pi_controller.ListCertificatesRequest.type:type_name -> pi_controller.CertificateType
	8,   // 72: pi_controller.ListCertificatesRequest.status:type_name -> pi_controller.CertificateStatus
	9,   // 73: pi_controller.ListCertificatesRequest.backend:type_name -> pi_controller.CertificateBackend
	54,  // 74: pi_controller.ListCertificatesResponse.certificates:type_name -> pi_controller.Certificate
	57,  // 75: pi_controller.ValidateCertificateResponse.validation:type_name -> pi_controller.CertificateValidation
	7,   // 76: pi_controller.CreateCertificateRequestRequest.type:type_name -> pi_controller.CertificateType
	12,  // 77: pi_controller.ListCertificateRequestsRequest.status:type_name -> pi_controller.CSRStatus
	7,   // 78: pi_controller.ListCertificateRequestsRequest.type:type_name -> pi_controller.CertificateType
	56,  // 79: pi_controller.ListCertificateRequestsResponse.requests:type_name -> pi_controller.CertificateRequest
	14,  // 80: pi_controller.PiControllerService.CreateCluster:input_type -> pi_controller.CreateClusterRequest
	15,  // 81: pi_controller.PiControllerService.GetCluster:input_type -> pi_controller.GetClusterRequest
	16,  // 82: pi_controller.PiControllerService.ListClusters:input_type -> pi_controller.ListClustersRequest
	18,  // 83: pi_controller.PiControllerService.UpdateCluster:input_type -> pi_controller.UpdateClusterRequest
	19,  // 84: pi_controller.PiControllerService.DeleteCluster:input_type -> pi_controller.DeleteClusterRequest
	22,  // 85: pi_controller.PiControllerService.CreateNode:input_type -> pi_controller.CreateNodeRequest
	23,  // 86: pi_controller.PiControllerService.GetNode:input_type -> pi_controller.GetNodeRequest
	24,  // 87: pi_controller.PiControllerService.ListNodes:input_type -> pi_controller.ListNodesRequest
	26,  // 88: pi_controller.PiControllerService.UpdateNode:input_type -> pi_controller.UpdateNodeRequest
	27,  // 89: pi_controller.PiControllerService.DeleteNode:input_type -> pi_controller.DeleteNodeRequest
	29,  // 90: pi_controller.PiControllerService.ProvisionNode:input_type -> pi_controller.ProvisionNodeRequest
	31,  // 91: pi_controller.PiControllerService.DeprovisionNode:input_type -> pi_controller.DeprovisionNodeRequest
	35,  // 92: pi_controller.PiControllerService.CreateGPIODevice:input_type -> pi_controller.CreateGPIODeviceRequest
	36,  // 93: pi_controller.PiControllerService.GetGPIODevice:input_type -> pi_controller.GetGPIODeviceRequest
	37,  // 94: pi_controller.PiControllerService.ListGPIODevices:input_type -> pi_controller.ListGPIODevicesRequest
	39,  // 95: pi_controller.PiControllerService.UpdateGPIODevice:input_type -> pi_controller.UpdateGPIODeviceRequest
	40,  // 96: pi_controller.PiControllerService.DeleteGPIODevice:input_type -> pi_controller.DeleteGPIODeviceRequest
	42,  // 97: pi_controller.PiControllerService.ReadGPIO:input_type -> pi_controller.ReadGPIORequest
	44,  // 98: pi_controller.PiControllerService.WriteGPIO:input_type -> pi_controller.WriteGPIORequest
	47,  // 99: pi_controller.PiControllerService.StreamGPIOReadings:input_type -> pi_controller.StreamGPIOReadingsRequest
	59,  // 100: pi_controller.PiControllerService.InitializeCA:input_type -> pi_controller.InitializeCARequest
	61,  // 101: pi_controller.PiControllerService.GetCAInfo:input_type -> pi_controller.GetCAInfoRequest
	62,  // 102: pi_controller.PiControllerService.GetCACertificate:input_type -> pi_controller.GetCACertificateRequest
	64,  // 103: pi_controller.PiControllerService.IssueCertificate:input_type -> pi_controller.IssueCertificateRequest
	65,  // 104: pi_controller.PiControllerService.GetCertificate:input_type -> pi_controller.GetCertificateRequest
	66,  // 105: pi_controller.PiControllerService.ListCertificates:input_type -> pi_controller.ListCertificatesRequest
	68,  // 106: pi_controller.PiControllerService.RenewCertificate:input_type -> pi_controller.RenewCertificateRequest
	69,  // 107: pi_controller.PiControllerService.RevokeCertificate:input_type -> pi_controller.RevokeCertificateRequest
	71,  // 108: pi_controller.PiControllerService.ValidateCertificate:input_type -> pi_controller.ValidateCertificateRequest
	73,  // 109: pi_controller.PiControllerService.CreateCertificateRequest:input_type -> pi_controller.CreateCertificateRequestRequest
	74,  // 110: pi_controller.PiControllerService.ProcessCertificateRequest:input_type -> pi_controller.ProcessCertificateRequestRequest
	75,  // 111: pi_controller.PiControllerService.ListCertificateRequests:input_type -> pi_controller.ListCertificateRequestsRequest
	77,  // 112: pi_controller.PiControllerService.GetCertificateStats:input_type -> pi_controller.GetCertificateStatsRequest
	78,  // 113: pi_controller.PiControllerService.CleanupExpiredCertificates:input_type -> pi_controller.CleanupExpiredCertificatesRequest
	48,  // 114: pi_controller.PiControllerService.Health:input_type -> pi_controller.HealthRequest
	50,  // 115: pi_controller.PiControllerService.GetSystemInfo:input_type -> pi_controller.SystemInfoRequest
	13,  // 116: pi_controller.PiControllerService.CreateCluster:output_type -> pi_controller.Cluster
	13,  // 117: pi_controller.PiControllerService.GetCluster:output_type -> pi_controller.Cluster
	17,  // 118: pi_controller.PiControllerService.ListClusters:output_type -> pi_controller.ListClustersResponse
	13,  // 119: pi_controller.PiControllerService.UpdateCluster:output_type -> pi_controller.Cluster
	20,  // 120: pi_controller.PiControllerService.DeleteCluster:output_type -> pi_controller.DeleteClusterResponse
	21,  // 121: pi_controller.PiControllerService.CreateNode:output_type -> pi_controller.Node
	21,  // 122: pi_controller.PiControllerService.GetNode:output_type -> pi_controller.Node
	25,  // 123: pi_controller.PiControllerService.ListNodes:output_type -> pi_controller.ListNodesResponse
	21,  // 124: pi_controller.PiControllerService.UpdateNode:output_type -> pi_controller.Node
	28,  // 125: pi_controller.PiControllerService.DeleteNode:output_type -> pi_controller.DeleteNodeResponse
	30,  // 126: pi_controller.PiControllerService.ProvisionNode:output_type -> pi_controller.ProvisionNodeResponse
	32,  // 127: pi_controller.PiControllerService.DeprovisionNode:output_type -> pi_controller.DeprovisionNodeResponse
	33,  // 128: pi_controller.PiControllerService.CreateGPIODevice:output_type -> pi_controller.GPIODevice
	33,  // 129: pi_controller.PiControllerService.GetGPIODevice:output_type -> pi_controller.GPIODevice
	38,  // 130: pi_controller.PiControllerService.ListGPIODevices:output_type -> pi_controller.ListGPIODevicesResponse
	33,  // 131: pi_controller.PiControllerService.UpdateGPIODevice:output_type -> pi_controller.GPIODevice
	41,  // 132: pi_controller.PiControllerService.DeleteGPIODevice:output_type -> pi_controller.DeleteGPIODeviceResponse
	43,  // 133: pi_controller.PiControllerService.ReadGPIO:output_type -> pi_controller.ReadGPIOResponse
	45,  // 134: pi_controller.PiControllerService.WriteGPIO:output_type -> pi_controller.WriteGPIOResponse
	46,  // 135: pi_controller.PiControllerService.StreamGPIOReadings:output_type -> pi_controller.GPIOReading
	60,  // 136: pi_controller.PiControllerService.InitializeCA:output_type -> pi_controller.InitializeCAResponse
	55,  // 137: pi_controller.PiControllerService.GetCAInfo:output_type -> pi_controller.CAInfo
	63,  // 138: pi_controller.PiControllerService.GetCACertificate:output_type -> pi_controller.GetCACertificateResponse
	54,  // 139: pi_controller.PiControllerService.IssueCertificate:output_type -> pi_controller.Certificate
	54,  // 140: pi_controller.PiControllerService.GetCertificate:output_type -> pi_controller.Certificate
	67,  // 141: pi_controller.PiControllerService.ListCertificates:output_type -> pi_controller.ListCertificatesResponse
	54,  // 142: pi_controller.PiControllerService.RenewCertificate:output_type -> pi_controller.Certificate
	70,  // 143: pi_controller.PiControllerService.RevokeCertificate:output_type -> pi_controller.RevokeCertificateResponse
	72,  // 144: pi_controller.PiControllerService.ValidateCertificate:output_type -> pi_controller.ValidateCertificateResponse
	56,  // 145: pi_controller.PiControllerService.CreateCertificateRequest:output_type -> pi_controller.CertificateRequest
	54,  // 146: pi_controller.PiControllerService.ProcessCertificateRequest:output_type -> pi_controller.Certificate
	76,  // 147: pi_controller.PiControllerService.ListCertificateRequests:output_type -> pi_controller.ListCertificateRequestsResponse
	58,  // 148: pi_controller.PiControllerService.GetCertificateStats:output_type -> pi_controller.CertificateStats
	79,  // 149: pi_controller.PiControllerService.CleanupExpiredCertificates:output_type -> pi_controller.CleanupExpiredCertificatesResponse
	49,  // 150: pi_controller.PiControllerService.Health:output_type -> pi_controller.HealthResponse
	51,  // 151: pi_controller.PiControllerService.GetSystemInfo:output_type -> pi_controller.SystemInfoResponse
	116, // [116:152] is the sub-list for method output_type
	80,  // [80:116] is the sub-list for method input_type
	80,  // [80:80] is the sub-list for extension type_name
	80,  // [80:80] is the sub-list for extension extendee
	0,   // [0:80] is the sub-list for field type_name
}

func init() { file_proto_pi_controller_proto_init() }
func file_proto_pi_controller_proto_init() {
	if File_proto_pi_controller_proto != nil {
		return
	}
	file_proto_pi_controller_proto_msgTypes[5].OneofWrappers = []any{}
	file_proto_pi_controller_proto_msgTypes[8].OneofWrappers = []any{}
	file_proto_pi_controller_proto_msgTypes[9].OneofWrappers = []any{}
	file_proto_pi_controller_proto_msgTypes[11].OneofWrappers = []any{}
	file_proto_pi_controller_proto_msgTypes[13].OneofWrappers = []any{}
	file_proto_pi_controller_proto_msgTypes[24].OneofWrappers = []any{}
	file_proto_pi_controller_proto_msgTypes[26].OneofWrappers = []any{}
	file_proto_pi_controller_proto_msgTypes[41].OneofWrappers = []any{}
	file_proto_pi_controller_proto_msgTypes[43].OneofWrappers = []any{}
	file_proto_pi_controller_proto_msgTypes[51].OneofWrappers = []any{}
	file_proto_pi_controller_proto_msgTypes[52].OneofWrappers = []any{
		(*GetCertificateRequest_Id)(nil),
		(*GetCertificateRequest_SerialNumber)(nil),
	}
	file_proto_pi_controller_proto_msgTypes[53].OneofWrappers = []any{}
	file_proto_pi_controller_proto_msgTypes[60].OneofWrappers = []any{}
	file_proto_pi_controller_proto_msgTypes[62].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_pi_controller_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   67,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_pi_controller_proto_goTypes,
		DependencyIndexes: file_proto_pi_controller_proto_depIdxs,
		EnumInfos:         file_proto_pi_controller_proto_enumTypes,
		MessageInfos:      file_proto_pi_controller_proto_msgTypes,
	}.Build()
	File_proto_pi_controller_proto = out.File
	file_proto_pi_controller_proto_rawDesc = nil
	file_proto_pi_controller_proto_goTypes = nil
	file_proto_pi_controller_proto_depIdxs = nil
}
