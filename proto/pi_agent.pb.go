// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.1
// source: proto/pi_agent.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GPIO enums for Pi Agent
type AgentGPIODirection int32

const (
	AgentGPIODirection_AGENT_GPIO_DIRECTION_UNSPECIFIED AgentGPIODirection = 0
	AgentGPIODirection_AGENT_GPIO_DIRECTION_INPUT       AgentGPIODirection = 1
	AgentGPIODirection_AGENT_GPIO_DIRECTION_OUTPUT      AgentGPIODirection = 2
)

// Enum value maps for AgentGPIODirection.
var (
	AgentGPIODirection_name = map[int32]string{
		0: "AGENT_GPIO_DIRECTION_UNSPECIFIED",
		1: "AGENT_GPIO_DIRECTION_INPUT",
		2: "AGENT_GPIO_DIRECTION_OUTPUT",
	}
	AgentGPIODirection_value = map[string]int32{
		"AGENT_GPIO_DIRECTION_UNSPECIFIED": 0,
		"AGENT_GPIO_DIRECTION_INPUT":       1,
		"AGENT_GPIO_DIRECTION_OUTPUT":      2,
	}
)

func (x AgentGPIODirection) Enum() *AgentGPIODirection {
	p := new(AgentGPIODirection)
	*p = x
	return p
}

func (x AgentGPIODirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentGPIODirection) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pi_agent_proto_enumTypes[0].Descriptor()
}

func (AgentGPIODirection) Type() protoreflect.EnumType {
	return &file_proto_pi_agent_proto_enumTypes[0]
}

func (x AgentGPIODirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentGPIODirection.Descriptor instead.
func (AgentGPIODirection) EnumDescriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{0}
}

type AgentGPIOPullMode int32

const (
	AgentGPIOPullMode_AGENT_GPIO_PULL_MODE_UNSPECIFIED AgentGPIOPullMode = 0
	AgentGPIOPullMode_AGENT_GPIO_PULL_MODE_NONE        AgentGPIOPullMode = 1
	AgentGPIOPullMode_AGENT_GPIO_PULL_MODE_UP          AgentGPIOPullMode = 2
	AgentGPIOPullMode_AGENT_GPIO_PULL_MODE_DOWN        AgentGPIOPullMode = 3
)

// Enum value maps for AgentGPIOPullMode.
var (
	AgentGPIOPullMode_name = map[int32]string{
		0: "AGENT_GPIO_PULL_MODE_UNSPECIFIED",
		1: "AGENT_GPIO_PULL_MODE_NONE",
		2: "AGENT_GPIO_PULL_MODE_UP",
		3: "AGENT_GPIO_PULL_MODE_DOWN",
	}
	AgentGPIOPullMode_value = map[string]int32{
		"AGENT_GPIO_PULL_MODE_UNSPECIFIED": 0,
		"AGENT_GPIO_PULL_MODE_NONE":        1,
		"AGENT_GPIO_PULL_MODE_UP":          2,
		"AGENT_GPIO_PULL_MODE_DOWN":        3,
	}
)

func (x AgentGPIOPullMode) Enum() *AgentGPIOPullMode {
	p := new(AgentGPIOPullMode)
	*p = x
	return p
}

func (x AgentGPIOPullMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AgentGPIOPullMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_pi_agent_proto_enumTypes[1].Descriptor()
}

func (AgentGPIOPullMode) Type() protoreflect.EnumType {
	return &file_proto_pi_agent_proto_enumTypes[1]
}

func (x AgentGPIOPullMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AgentGPIOPullMode.Descriptor instead.
func (AgentGPIOPullMode) EnumDescriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{1}
}

// GPIO pin configuration request
type ConfigureGPIOPinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin       int32              `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`
	Direction AgentGPIODirection `protobuf:"varint,2,opt,name=direction,proto3,enum=pi_agent.AgentGPIODirection" json:"direction,omitempty"`
	PullMode  AgentGPIOPullMode  `protobuf:"varint,3,opt,name=pull_mode,json=pullMode,proto3,enum=pi_agent.AgentGPIOPullMode" json:"pull_mode,omitempty"`
	// PWM configuration (optional)
	PwmFrequency int32 `protobuf:"varint,4,opt,name=pwm_frequency,json=pwmFrequency,proto3" json:"pwm_frequency,omitempty"`
	PwmDutyCycle int32 `protobuf:"varint,5,opt,name=pwm_duty_cycle,json=pwmDutyCycle,proto3" json:"pwm_duty_cycle,omitempty"`
}

func (x *ConfigureGPIOPinRequest) Reset() {
	*x = ConfigureGPIOPinRequest{}
	mi := &file_proto_pi_agent_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureGPIOPinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureGPIOPinRequest) ProtoMessage() {}

func (x *ConfigureGPIOPinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureGPIOPinRequest.ProtoReflect.Descriptor instead.
func (*ConfigureGPIOPinRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigureGPIOPinRequest) GetPin() int32 {
	if x != nil {
		return x.Pin
	}
	return 0
}

func (x *ConfigureGPIOPinRequest) GetDirection() AgentGPIODirection {
	if x != nil {
		return x.Direction
	}
	return AgentGPIODirection_AGENT_GPIO_DIRECTION_UNSPECIFIED
}

func (x *ConfigureGPIOPinRequest) GetPullMode() AgentGPIOPullMode {
	if x != nil {
		return x.PullMode
	}
	return AgentGPIOPullMode_AGENT_GPIO_PULL_MODE_UNSPECIFIED
}

func (x *ConfigureGPIOPinRequest) GetPwmFrequency() int32 {
	if x != nil {
		return x.PwmFrequency
	}
	return 0
}

func (x *ConfigureGPIOPinRequest) GetPwmDutyCycle() int32 {
	if x != nil {
		return x.PwmDutyCycle
	}
	return 0
}

type ConfigureGPIOPinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message      string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ConfiguredAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=configured_at,json=configuredAt,proto3" json:"configured_at,omitempty"`
}

func (x *ConfigureGPIOPinResponse) Reset() {
	*x = ConfigureGPIOPinResponse{}
	mi := &file_proto_pi_agent_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureGPIOPinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureGPIOPinResponse) ProtoMessage() {}

func (x *ConfigureGPIOPinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureGPIOPinResponse.ProtoReflect.Descriptor instead.
func (*ConfigureGPIOPinResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigureGPIOPinResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConfigureGPIOPinResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ConfigureGPIOPinResponse) GetConfiguredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ConfiguredAt
	}
	return nil
}

// Read GPIO pin request
type ReadGPIOPinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin int32 `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`
}

func (x *ReadGPIOPinRequest) Reset() {
	*x = ReadGPIOPinRequest{}
	mi := &file_proto_pi_agent_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadGPIOPinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGPIOPinRequest) ProtoMessage() {}

func (x *ReadGPIOPinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGPIOPinRequest.ProtoReflect.Descriptor instead.
func (*ReadGPIOPinRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{2}
}

func (x *ReadGPIOPinRequest) GetPin() int32 {
	if x != nil {
		return x.Pin
	}
	return 0
}

type ReadGPIOPinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin       int32                  `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`
	Value     int32                  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"` // 0 for LOW, 1 for HIGH
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ReadGPIOPinResponse) Reset() {
	*x = ReadGPIOPinResponse{}
	mi := &file_proto_pi_agent_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadGPIOPinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadGPIOPinResponse) ProtoMessage() {}

func (x *ReadGPIOPinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadGPIOPinResponse.ProtoReflect.Descriptor instead.
func (*ReadGPIOPinResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{3}
}

func (x *ReadGPIOPinResponse) GetPin() int32 {
	if x != nil {
		return x.Pin
	}
	return 0
}

func (x *ReadGPIOPinResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ReadGPIOPinResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Write GPIO pin request
type WriteGPIOPinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin   int32 `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"` // 0 for LOW, 1 for HIGH
}

func (x *WriteGPIOPinRequest) Reset() {
	*x = WriteGPIOPinRequest{}
	mi := &file_proto_pi_agent_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteGPIOPinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGPIOPinRequest) ProtoMessage() {}

func (x *WriteGPIOPinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGPIOPinRequest.ProtoReflect.Descriptor instead.
func (*WriteGPIOPinRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{4}
}

func (x *WriteGPIOPinRequest) GetPin() int32 {
	if x != nil {
		return x.Pin
	}
	return 0
}

func (x *WriteGPIOPinRequest) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type WriteGPIOPinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin       int32                  `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`
	Value     int32                  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *WriteGPIOPinResponse) Reset() {
	*x = WriteGPIOPinResponse{}
	mi := &file_proto_pi_agent_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteGPIOPinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteGPIOPinResponse) ProtoMessage() {}

func (x *WriteGPIOPinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteGPIOPinResponse.ProtoReflect.Descriptor instead.
func (*WriteGPIOPinResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{5}
}

func (x *WriteGPIOPinResponse) GetPin() int32 {
	if x != nil {
		return x.Pin
	}
	return 0
}

func (x *WriteGPIOPinResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *WriteGPIOPinResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// PWM configuration request
type SetGPIOPWMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin       int32 `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`
	Frequency int32 `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`                  // Hz
	DutyCycle int32 `protobuf:"varint,3,opt,name=duty_cycle,json=dutyCycle,proto3" json:"duty_cycle,omitempty"` // 0-100%
}

func (x *SetGPIOPWMRequest) Reset() {
	*x = SetGPIOPWMRequest{}
	mi := &file_proto_pi_agent_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetGPIOPWMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGPIOPWMRequest) ProtoMessage() {}

func (x *SetGPIOPWMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGPIOPWMRequest.ProtoReflect.Descriptor instead.
func (*SetGPIOPWMRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{6}
}

func (x *SetGPIOPWMRequest) GetPin() int32 {
	if x != nil {
		return x.Pin
	}
	return 0
}

func (x *SetGPIOPWMRequest) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *SetGPIOPWMRequest) GetDutyCycle() int32 {
	if x != nil {
		return x.DutyCycle
	}
	return 0
}

type SetGPIOPWMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message      string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Pin          int32                  `protobuf:"varint,3,opt,name=pin,proto3" json:"pin,omitempty"`
	Frequency    int32                  `protobuf:"varint,4,opt,name=frequency,proto3" json:"frequency,omitempty"`
	DutyCycle    int32                  `protobuf:"varint,5,opt,name=duty_cycle,json=dutyCycle,proto3" json:"duty_cycle,omitempty"`
	ConfiguredAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=configured_at,json=configuredAt,proto3" json:"configured_at,omitempty"`
}

func (x *SetGPIOPWMResponse) Reset() {
	*x = SetGPIOPWMResponse{}
	mi := &file_proto_pi_agent_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetGPIOPWMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGPIOPWMResponse) ProtoMessage() {}

func (x *SetGPIOPWMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGPIOPWMResponse.ProtoReflect.Descriptor instead.
func (*SetGPIOPWMResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{7}
}

func (x *SetGPIOPWMResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SetGPIOPWMResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SetGPIOPWMResponse) GetPin() int32 {
	if x != nil {
		return x.Pin
	}
	return 0
}

func (x *SetGPIOPWMResponse) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *SetGPIOPWMResponse) GetDutyCycle() int32 {
	if x != nil {
		return x.DutyCycle
	}
	return 0
}

func (x *SetGPIOPWMResponse) GetConfiguredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ConfiguredAt
	}
	return nil
}

// List configured pins request
type ListConfiguredPinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListConfiguredPinsRequest) Reset() {
	*x = ListConfiguredPinsRequest{}
	mi := &file_proto_pi_agent_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfiguredPinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfiguredPinsRequest) ProtoMessage() {}

func (x *ListConfiguredPinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfiguredPinsRequest.ProtoReflect.Descriptor instead.
func (*ListConfiguredPinsRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{8}
}

type ListConfiguredPinsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pins []*GPIOPinState `protobuf:"bytes,1,rep,name=pins,proto3" json:"pins,omitempty"`
}

func (x *ListConfiguredPinsResponse) Reset() {
	*x = ListConfiguredPinsResponse{}
	mi := &file_proto_pi_agent_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConfiguredPinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConfiguredPinsResponse) ProtoMessage() {}

func (x *ListConfiguredPinsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConfiguredPinsResponse.ProtoReflect.Descriptor instead.
func (*ListConfiguredPinsResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{9}
}

func (x *ListConfiguredPinsResponse) GetPins() []*GPIOPinState {
	if x != nil {
		return x.Pins
	}
	return nil
}

// GPIO pin state
type GPIOPinState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin         int32                  `protobuf:"varint,1,opt,name=pin,proto3" json:"pin,omitempty"`
	Direction   AgentGPIODirection     `protobuf:"varint,2,opt,name=direction,proto3,enum=pi_agent.AgentGPIODirection" json:"direction,omitempty"`
	PullMode    AgentGPIOPullMode      `protobuf:"varint,3,opt,name=pull_mode,json=pullMode,proto3,enum=pi_agent.AgentGPIOPullMode" json:"pull_mode,omitempty"`
	Value       int32                  `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	LastUpdated *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *GPIOPinState) Reset() {
	*x = GPIOPinState{}
	mi := &file_proto_pi_agent_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPIOPinState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPIOPinState) ProtoMessage() {}

func (x *GPIOPinState) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPIOPinState.ProtoReflect.Descriptor instead.
func (*GPIOPinState) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{10}
}

func (x *GPIOPinState) GetPin() int32 {
	if x != nil {
		return x.Pin
	}
	return 0
}

func (x *GPIOPinState) GetDirection() AgentGPIODirection {
	if x != nil {
		return x.Direction
	}
	return AgentGPIODirection_AGENT_GPIO_DIRECTION_UNSPECIFIED
}

func (x *GPIOPinState) GetPullMode() AgentGPIOPullMode {
	if x != nil {
		return x.PullMode
	}
	return AgentGPIOPullMode_AGENT_GPIO_PULL_MODE_UNSPECIFIED
}

func (x *GPIOPinState) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GPIOPinState) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

// Health and system info
type AgentHealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AgentHealthRequest) Reset() {
	*x = AgentHealthRequest{}
	mi := &file_proto_pi_agent_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentHealthRequest) ProtoMessage() {}

func (x *AgentHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentHealthRequest.ProtoReflect.Descriptor instead.
func (*AgentHealthRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{11}
}

type AgentHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Uptime        string                 `protobuf:"bytes,4,opt,name=uptime,proto3" json:"uptime,omitempty"`
	GpioAvailable bool                   `protobuf:"varint,5,opt,name=gpio_available,json=gpioAvailable,proto3" json:"gpio_available,omitempty"`
}

func (x *AgentHealthResponse) Reset() {
	*x = AgentHealthResponse{}
	mi := &file_proto_pi_agent_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentHealthResponse) ProtoMessage() {}

func (x *AgentHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentHealthResponse.ProtoReflect.Descriptor instead.
func (*AgentHealthResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{12}
}

func (x *AgentHealthResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AgentHealthResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AgentHealthResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AgentHealthResponse) GetUptime() string {
	if x != nil {
		return x.Uptime
	}
	return ""
}

func (x *AgentHealthResponse) GetGpioAvailable() bool {
	if x != nil {
		return x.GpioAvailable
	}
	return false
}

type GetSystemInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSystemInfoRequest) Reset() {
	*x = GetSystemInfoRequest{}
	mi := &file_proto_pi_agent_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSystemInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemInfoRequest) ProtoMessage() {}

func (x *GetSystemInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemInfoRequest.ProtoReflect.Descriptor instead.
func (*GetSystemInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{13}
}

type GetSystemInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname        string                 `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Platform        string                 `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	Architecture    string                 `protobuf:"bytes,3,opt,name=architecture,proto3" json:"architecture,omitempty"`
	CpuCores        int32                  `protobuf:"varint,4,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	MemoryTotal     int64                  `protobuf:"varint,5,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	MemoryAvailable int64                  `protobuf:"varint,6,opt,name=memory_available,json=memoryAvailable,proto3" json:"memory_available,omitempty"`
	KernelVersion   string                 `protobuf:"bytes,7,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	LoadAverage_1M  float32                `protobuf:"fixed32,8,opt,name=load_average_1m,json=loadAverage1m,proto3" json:"load_average_1m,omitempty"`
	LoadAverage_5M  float32                `protobuf:"fixed32,9,opt,name=load_average_5m,json=loadAverage5m,proto3" json:"load_average_5m,omitempty"`
	LoadAverage_15M float32                `protobuf:"fixed32,10,opt,name=load_average_15m,json=loadAverage15m,proto3" json:"load_average_15m,omitempty"`
	Timestamp       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetSystemInfoResponse) Reset() {
	*x = GetSystemInfoResponse{}
	mi := &file_proto_pi_agent_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSystemInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemInfoResponse) ProtoMessage() {}

func (x *GetSystemInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemInfoResponse.ProtoReflect.Descriptor instead.
func (*GetSystemInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{14}
}

func (x *GetSystemInfoResponse) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *GetSystemInfoResponse) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetSystemInfoResponse) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *GetSystemInfoResponse) GetCpuCores() int32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *GetSystemInfoResponse) GetMemoryTotal() int64 {
	if x != nil {
		return x.MemoryTotal
	}
	return 0
}

func (x *GetSystemInfoResponse) GetMemoryAvailable() int64 {
	if x != nil {
		return x.MemoryAvailable
	}
	return 0
}

func (x *GetSystemInfoResponse) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *GetSystemInfoResponse) GetLoadAverage_1M() float32 {
	if x != nil {
		return x.LoadAverage_1M
	}
	return 0
}

func (x *GetSystemInfoResponse) GetLoadAverage_5M() float32 {
	if x != nil {
		return x.LoadAverage_5M
	}
	return 0
}

func (x *GetSystemInfoResponse) GetLoadAverage_15M() float32 {
	if x != nil {
		return x.LoadAverage_15M
	}
	return 0
}

func (x *GetSystemInfoResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// System metrics requests and responses
type GetSystemMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetSystemMetricsRequest) Reset() {
	*x = GetSystemMetricsRequest{}
	mi := &file_proto_pi_agent_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSystemMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemMetricsRequest) ProtoMessage() {}

func (x *GetSystemMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemMetricsRequest.ProtoReflect.Descriptor instead.
func (*GetSystemMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{15}
}

type GetSystemMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics   *SystemMetrics         `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *GetSystemMetricsResponse) Reset() {
	*x = GetSystemMetricsResponse{}
	mi := &file_proto_pi_agent_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSystemMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSystemMetricsResponse) ProtoMessage() {}

func (x *GetSystemMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSystemMetricsResponse.ProtoReflect.Descriptor instead.
func (*GetSystemMetricsResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{16}
}

func (x *GetSystemMetricsResponse) GetMetrics() *SystemMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *GetSystemMetricsResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type StreamSystemMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntervalSeconds int32 `protobuf:"varint,1,opt,name=interval_seconds,json=intervalSeconds,proto3" json:"interval_seconds,omitempty"` // Collection interval in seconds (default: 5)
}

func (x *StreamSystemMetricsRequest) Reset() {
	*x = StreamSystemMetricsRequest{}
	mi := &file_proto_pi_agent_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamSystemMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSystemMetricsRequest) ProtoMessage() {}

func (x *StreamSystemMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSystemMetricsRequest.ProtoReflect.Descriptor instead.
func (*StreamSystemMetricsRequest) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{17}
}

func (x *StreamSystemMetricsRequest) GetIntervalSeconds() int32 {
	if x != nil {
		return x.IntervalSeconds
	}
	return 0
}

type SystemMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics   *SystemMetrics         `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SystemMetricsResponse) Reset() {
	*x = SystemMetricsResponse{}
	mi := &file_proto_pi_agent_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemMetricsResponse) ProtoMessage() {}

func (x *SystemMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemMetricsResponse.ProtoReflect.Descriptor instead.
func (*SystemMetricsResponse) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{18}
}

func (x *SystemMetricsResponse) GetMetrics() *SystemMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *SystemMetricsResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// System metrics data structure
type SystemMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPU metrics
	Cpu *CPUMetrics `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Memory metrics
	Memory *MemoryMetrics `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	// Disk metrics
	Disks []*DiskMetrics `protobuf:"bytes,3,rep,name=disks,proto3" json:"disks,omitempty"`
	// Network metrics
	Network []*NetworkMetrics `protobuf:"bytes,4,rep,name=network,proto3" json:"network,omitempty"`
	// Thermal metrics (especially important for Raspberry Pi)
	Thermal *ThermalMetrics `protobuf:"bytes,5,opt,name=thermal,proto3" json:"thermal,omitempty"`
	// System load
	Load *LoadMetrics `protobuf:"bytes,6,opt,name=load,proto3" json:"load,omitempty"`
	// Process metrics
	Processes *ProcessMetrics `protobuf:"bytes,7,opt,name=processes,proto3" json:"processes,omitempty"`
}

func (x *SystemMetrics) Reset() {
	*x = SystemMetrics{}
	mi := &file_proto_pi_agent_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemMetrics) ProtoMessage() {}

func (x *SystemMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemMetrics.ProtoReflect.Descriptor instead.
func (*SystemMetrics) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{19}
}

func (x *SystemMetrics) GetCpu() *CPUMetrics {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *SystemMetrics) GetMemory() *MemoryMetrics {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *SystemMetrics) GetDisks() []*DiskMetrics {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *SystemMetrics) GetNetwork() []*NetworkMetrics {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *SystemMetrics) GetThermal() *ThermalMetrics {
	if x != nil {
		return x.Thermal
	}
	return nil
}

func (x *SystemMetrics) GetLoad() *LoadMetrics {
	if x != nil {
		return x.Load
	}
	return nil
}

func (x *SystemMetrics) GetProcesses() *ProcessMetrics {
	if x != nil {
		return x.Processes
	}
	return nil
}

type CPUMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsagePercent  float64   `protobuf:"fixed64,1,opt,name=usage_percent,json=usagePercent,proto3" json:"usage_percent,omitempty"`          // Overall CPU usage percentage
	PerCoreUsage  []float64 `protobuf:"fixed64,2,rep,packed,name=per_core_usage,json=perCoreUsage,proto3" json:"per_core_usage,omitempty"` // Usage per CPU core
	UserPercent   float64   `protobuf:"fixed64,3,opt,name=user_percent,json=userPercent,proto3" json:"user_percent,omitempty"`             // User space CPU usage
	SystemPercent float64   `protobuf:"fixed64,4,opt,name=system_percent,json=systemPercent,proto3" json:"system_percent,omitempty"`       // System/kernel CPU usage
	IdlePercent   float64   `protobuf:"fixed64,5,opt,name=idle_percent,json=idlePercent,proto3" json:"idle_percent,omitempty"`             // Idle CPU percentage
	IowaitPercent float64   `protobuf:"fixed64,6,opt,name=iowait_percent,json=iowaitPercent,proto3" json:"iowait_percent,omitempty"`       // I/O wait percentage
}

func (x *CPUMetrics) Reset() {
	*x = CPUMetrics{}
	mi := &file_proto_pi_agent_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CPUMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUMetrics) ProtoMessage() {}

func (x *CPUMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUMetrics.ProtoReflect.Descriptor instead.
func (*CPUMetrics) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{20}
}

func (x *CPUMetrics) GetUsagePercent() float64 {
	if x != nil {
		return x.UsagePercent
	}
	return 0
}

func (x *CPUMetrics) GetPerCoreUsage() []float64 {
	if x != nil {
		return x.PerCoreUsage
	}
	return nil
}

func (x *CPUMetrics) GetUserPercent() float64 {
	if x != nil {
		return x.UserPercent
	}
	return 0
}

func (x *CPUMetrics) GetSystemPercent() float64 {
	if x != nil {
		return x.SystemPercent
	}
	return 0
}

func (x *CPUMetrics) GetIdlePercent() float64 {
	if x != nil {
		return x.IdlePercent
	}
	return 0
}

func (x *CPUMetrics) GetIowaitPercent() float64 {
	if x != nil {
		return x.IowaitPercent
	}
	return 0
}

type MemoryMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBytes       uint64  `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`                       // Total system memory
	AvailableBytes   uint64  `protobuf:"varint,2,opt,name=available_bytes,json=availableBytes,proto3" json:"available_bytes,omitempty"`           // Available memory
	UsedBytes        uint64  `protobuf:"varint,3,opt,name=used_bytes,json=usedBytes,proto3" json:"used_bytes,omitempty"`                          // Used memory
	FreeBytes        uint64  `protobuf:"varint,4,opt,name=free_bytes,json=freeBytes,proto3" json:"free_bytes,omitempty"`                          // Free memory
	CachedBytes      uint64  `protobuf:"varint,5,opt,name=cached_bytes,json=cachedBytes,proto3" json:"cached_bytes,omitempty"`                    // Cached memory
	BuffersBytes     uint64  `protobuf:"varint,6,opt,name=buffers_bytes,json=buffersBytes,proto3" json:"buffers_bytes,omitempty"`                 // Buffer cache
	UsagePercent     float64 `protobuf:"fixed64,7,opt,name=usage_percent,json=usagePercent,proto3" json:"usage_percent,omitempty"`                // Memory usage percentage
	SwapTotalBytes   uint64  `protobuf:"varint,8,opt,name=swap_total_bytes,json=swapTotalBytes,proto3" json:"swap_total_bytes,omitempty"`         // Total swap space
	SwapUsedBytes    uint64  `protobuf:"varint,9,opt,name=swap_used_bytes,json=swapUsedBytes,proto3" json:"swap_used_bytes,omitempty"`            // Used swap space
	SwapUsagePercent float64 `protobuf:"fixed64,10,opt,name=swap_usage_percent,json=swapUsagePercent,proto3" json:"swap_usage_percent,omitempty"` // Swap usage percentage
}

func (x *MemoryMetrics) Reset() {
	*x = MemoryMetrics{}
	mi := &file_proto_pi_agent_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryMetrics) ProtoMessage() {}

func (x *MemoryMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryMetrics.ProtoReflect.Descriptor instead.
func (*MemoryMetrics) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{21}
}

func (x *MemoryMetrics) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *MemoryMetrics) GetAvailableBytes() uint64 {
	if x != nil {
		return x.AvailableBytes
	}
	return 0
}

func (x *MemoryMetrics) GetUsedBytes() uint64 {
	if x != nil {
		return x.UsedBytes
	}
	return 0
}

func (x *MemoryMetrics) GetFreeBytes() uint64 {
	if x != nil {
		return x.FreeBytes
	}
	return 0
}

func (x *MemoryMetrics) GetCachedBytes() uint64 {
	if x != nil {
		return x.CachedBytes
	}
	return 0
}

func (x *MemoryMetrics) GetBuffersBytes() uint64 {
	if x != nil {
		return x.BuffersBytes
	}
	return 0
}

func (x *MemoryMetrics) GetUsagePercent() float64 {
	if x != nil {
		return x.UsagePercent
	}
	return 0
}

func (x *MemoryMetrics) GetSwapTotalBytes() uint64 {
	if x != nil {
		return x.SwapTotalBytes
	}
	return 0
}

func (x *MemoryMetrics) GetSwapUsedBytes() uint64 {
	if x != nil {
		return x.SwapUsedBytes
	}
	return 0
}

func (x *MemoryMetrics) GetSwapUsagePercent() float64 {
	if x != nil {
		return x.SwapUsagePercent
	}
	return 0
}

type DiskMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device             string  `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`                                                        // Device name (e.g., /dev/sda1)
	Mountpoint         string  `protobuf:"bytes,2,opt,name=mountpoint,proto3" json:"mountpoint,omitempty"`                                                // Mount point (e.g., /)
	Filesystem         string  `protobuf:"bytes,3,opt,name=filesystem,proto3" json:"filesystem,omitempty"`                                                // Filesystem type (e.g., ext4)
	TotalBytes         uint64  `protobuf:"varint,4,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`                             // Total disk space
	UsedBytes          uint64  `protobuf:"varint,5,opt,name=used_bytes,json=usedBytes,proto3" json:"used_bytes,omitempty"`                                // Used disk space
	FreeBytes          uint64  `protobuf:"varint,6,opt,name=free_bytes,json=freeBytes,proto3" json:"free_bytes,omitempty"`                                // Free disk space
	UsagePercent       float64 `protobuf:"fixed64,7,opt,name=usage_percent,json=usagePercent,proto3" json:"usage_percent,omitempty"`                      // Disk usage percentage
	InodesTotal        uint64  `protobuf:"varint,8,opt,name=inodes_total,json=inodesTotal,proto3" json:"inodes_total,omitempty"`                          // Total inodes
	InodesUsed         uint64  `protobuf:"varint,9,opt,name=inodes_used,json=inodesUsed,proto3" json:"inodes_used,omitempty"`                             // Used inodes
	InodesFree         uint64  `protobuf:"varint,10,opt,name=inodes_free,json=inodesFree,proto3" json:"inodes_free,omitempty"`                            // Free inodes
	InodesUsagePercent float64 `protobuf:"fixed64,11,opt,name=inodes_usage_percent,json=inodesUsagePercent,proto3" json:"inodes_usage_percent,omitempty"` // Inode usage percentage
}

func (x *DiskMetrics) Reset() {
	*x = DiskMetrics{}
	mi := &file_proto_pi_agent_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskMetrics) ProtoMessage() {}

func (x *DiskMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskMetrics.ProtoReflect.Descriptor instead.
func (*DiskMetrics) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{22}
}

func (x *DiskMetrics) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DiskMetrics) GetMountpoint() string {
	if x != nil {
		return x.Mountpoint
	}
	return ""
}

func (x *DiskMetrics) GetFilesystem() string {
	if x != nil {
		return x.Filesystem
	}
	return ""
}

func (x *DiskMetrics) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *DiskMetrics) GetUsedBytes() uint64 {
	if x != nil {
		return x.UsedBytes
	}
	return 0
}

func (x *DiskMetrics) GetFreeBytes() uint64 {
	if x != nil {
		return x.FreeBytes
	}
	return 0
}

func (x *DiskMetrics) GetUsagePercent() float64 {
	if x != nil {
		return x.UsagePercent
	}
	return 0
}

func (x *DiskMetrics) GetInodesTotal() uint64 {
	if x != nil {
		return x.InodesTotal
	}
	return 0
}

func (x *DiskMetrics) GetInodesUsed() uint64 {
	if x != nil {
		return x.InodesUsed
	}
	return 0
}

func (x *DiskMetrics) GetInodesFree() uint64 {
	if x != nil {
		return x.InodesFree
	}
	return 0
}

func (x *DiskMetrics) GetInodesUsagePercent() float64 {
	if x != nil {
		return x.InodesUsagePercent
	}
	return 0
}

type NetworkMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interface   string `protobuf:"bytes,1,opt,name=interface,proto3" json:"interface,omitempty"`                         // Network interface name
	BytesSent   uint64 `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`       // Total bytes sent
	BytesRecv   uint64 `protobuf:"varint,3,opt,name=bytes_recv,json=bytesRecv,proto3" json:"bytes_recv,omitempty"`       // Total bytes received
	PacketsSent uint64 `protobuf:"varint,4,opt,name=packets_sent,json=packetsSent,proto3" json:"packets_sent,omitempty"` // Total packets sent
	PacketsRecv uint64 `protobuf:"varint,5,opt,name=packets_recv,json=packetsRecv,proto3" json:"packets_recv,omitempty"` // Total packets received
	ErrIn       uint64 `protobuf:"varint,6,opt,name=err_in,json=errIn,proto3" json:"err_in,omitempty"`                   // Input errors
	ErrOut      uint64 `protobuf:"varint,7,opt,name=err_out,json=errOut,proto3" json:"err_out,omitempty"`                // Output errors
	DropIn      uint64 `protobuf:"varint,8,opt,name=drop_in,json=dropIn,proto3" json:"drop_in,omitempty"`                // Input drops
	DropOut     uint64 `protobuf:"varint,9,opt,name=drop_out,json=dropOut,proto3" json:"drop_out,omitempty"`             // Output drops
}

func (x *NetworkMetrics) Reset() {
	*x = NetworkMetrics{}
	mi := &file_proto_pi_agent_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkMetrics) ProtoMessage() {}

func (x *NetworkMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkMetrics.ProtoReflect.Descriptor instead.
func (*NetworkMetrics) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{23}
}

func (x *NetworkMetrics) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *NetworkMetrics) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *NetworkMetrics) GetBytesRecv() uint64 {
	if x != nil {
		return x.BytesRecv
	}
	return 0
}

func (x *NetworkMetrics) GetPacketsSent() uint64 {
	if x != nil {
		return x.PacketsSent
	}
	return 0
}

func (x *NetworkMetrics) GetPacketsRecv() uint64 {
	if x != nil {
		return x.PacketsRecv
	}
	return 0
}

func (x *NetworkMetrics) GetErrIn() uint64 {
	if x != nil {
		return x.ErrIn
	}
	return 0
}

func (x *NetworkMetrics) GetErrOut() uint64 {
	if x != nil {
		return x.ErrOut
	}
	return 0
}

func (x *NetworkMetrics) GetDropIn() uint64 {
	if x != nil {
		return x.DropIn
	}
	return 0
}

func (x *NetworkMetrics) GetDropOut() uint64 {
	if x != nil {
		return x.DropOut
	}
	return 0
}

type ThermalMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zones []*ThermalZone `protobuf:"bytes,1,rep,name=zones,proto3" json:"zones,omitempty"` // Thermal zones (CPU, GPU, etc.)
}

func (x *ThermalMetrics) Reset() {
	*x = ThermalMetrics{}
	mi := &file_proto_pi_agent_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThermalMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermalMetrics) ProtoMessage() {}

func (x *ThermalMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermalMetrics.ProtoReflect.Descriptor instead.
func (*ThermalMetrics) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{24}
}

func (x *ThermalMetrics) GetZones() []*ThermalZone {
	if x != nil {
		return x.Zones
	}
	return nil
}

type ThermalZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                         // Zone name (e.g., cpu-thermal)
	TemperatureCelsius float64 `protobuf:"fixed64,2,opt,name=temperature_celsius,json=temperatureCelsius,proto3" json:"temperature_celsius,omitempty"` // Current temperature in Celsius
	CriticalTemp       float64 `protobuf:"fixed64,3,opt,name=critical_temp,json=criticalTemp,proto3" json:"critical_temp,omitempty"`                   // Critical temperature threshold
	Status             string  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`                                                     // Thermal zone status
}

func (x *ThermalZone) Reset() {
	*x = ThermalZone{}
	mi := &file_proto_pi_agent_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThermalZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermalZone) ProtoMessage() {}

func (x *ThermalZone) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermalZone.ProtoReflect.Descriptor instead.
func (*ThermalZone) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{25}
}

func (x *ThermalZone) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThermalZone) GetTemperatureCelsius() float64 {
	if x != nil {
		return x.TemperatureCelsius
	}
	return 0
}

func (x *ThermalZone) GetCriticalTemp() float64 {
	if x != nil {
		return x.CriticalTemp
	}
	return 0
}

func (x *ThermalZone) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type LoadMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Load1  float64 `protobuf:"fixed64,1,opt,name=load1,proto3" json:"load1,omitempty"`   // 1-minute load average
	Load5  float64 `protobuf:"fixed64,2,opt,name=load5,proto3" json:"load5,omitempty"`   // 5-minute load average
	Load15 float64 `protobuf:"fixed64,3,opt,name=load15,proto3" json:"load15,omitempty"` // 15-minute load average
}

func (x *LoadMetrics) Reset() {
	*x = LoadMetrics{}
	mi := &file_proto_pi_agent_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadMetrics) ProtoMessage() {}

func (x *LoadMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadMetrics.ProtoReflect.Descriptor instead.
func (*LoadMetrics) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{26}
}

func (x *LoadMetrics) GetLoad1() float64 {
	if x != nil {
		return x.Load1
	}
	return 0
}

func (x *LoadMetrics) GetLoad5() float64 {
	if x != nil {
		return x.Load5
	}
	return 0
}

func (x *LoadMetrics) GetLoad15() float64 {
	if x != nil {
		return x.Load15
	}
	return 0
}

type ProcessMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`       // Total number of processes
	Running  uint32 `protobuf:"varint,2,opt,name=running,proto3" json:"running,omitempty"`   // Number of running processes
	Sleeping uint32 `protobuf:"varint,3,opt,name=sleeping,proto3" json:"sleeping,omitempty"` // Number of sleeping processes
	Stopped  uint32 `protobuf:"varint,4,opt,name=stopped,proto3" json:"stopped,omitempty"`   // Number of stopped processes
	Zombie   uint32 `protobuf:"varint,5,opt,name=zombie,proto3" json:"zombie,omitempty"`     // Number of zombie processes
}

func (x *ProcessMetrics) Reset() {
	*x = ProcessMetrics{}
	mi := &file_proto_pi_agent_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMetrics) ProtoMessage() {}

func (x *ProcessMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_proto_pi_agent_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMetrics.ProtoReflect.Descriptor instead.
func (*ProcessMetrics) Descriptor() ([]byte, []int) {
	return file_proto_pi_agent_proto_rawDescGZIP(), []int{27}
}

func (x *ProcessMetrics) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProcessMetrics) GetRunning() uint32 {
	if x != nil {
		return x.Running
	}
	return 0
}

func (x *ProcessMetrics) GetSleeping() uint32 {
	if x != nil {
		return x.Sleeping
	}
	return 0
}

func (x *ProcessMetrics) GetStopped() uint32 {
	if x != nil {
		return x.Stopped
	}
	return 0
}

func (x *ProcessMetrics) GetZombie() uint32 {
	if x != nil {
		return x.Zombie
	}
	return 0
}

var File_proto_pi_agent_proto protoreflect.FileDescriptor

var file_proto_pi_agent_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xec, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x47,
	0x50, 0x49, 0x4f, 0x50, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12,
	0x3a, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x70,
	0x75, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47,
	0x50, 0x49, 0x4f, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x75, 0x6c,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x77, 0x6d, 0x5f, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x77,
	0x6d, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x77,
	0x6d, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x70, 0x77, 0x6d, 0x44, 0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x22, 0x8f, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x47, 0x50,
	0x49, 0x4f, 0x50, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x26, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x22, 0x77, 0x0a, 0x13, 0x52, 0x65,
	0x61, 0x64, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x70, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x3d, 0x0a, 0x13, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x50, 0x49, 0x4f,
	0x50, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x78, 0x0a, 0x14, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x50, 0x49, 0x4f, 0x50,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x62, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x57, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x70, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x22, 0xd8, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x57, 0x4d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x75, 0x74, 0x79, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x64, 0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x41, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x50, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x50, 0x49, 0x4f, 0x50, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x04, 0x70, 0x69,
	0x6e, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x0c, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x70, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x70, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x14, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc0, 0x01, 0x0a, 0x13, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x70, 0x69, 0x6f, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x70, 0x69, 0x6f,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xb9, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x31,
	0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x35, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6c, 0x6f, 0x61, 0x64,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x35, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x35, 0x6d, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x31, 0x35, 0x6d, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x19, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x47, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x15,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xe0, 0x02, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x50, 0x55,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x2f, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a,
	0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x69,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32,
	0x0a, 0x07, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x74, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x36, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x0a, 0x43, 0x50, 0x55, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x6c,
	0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x69, 0x64, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x69, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x22, 0x84, 0x03, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73,
	0x77, 0x61, 0x70, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x77, 0x61, 0x70, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x80, 0x03, 0x0a, 0x0b, 0x44,
	0x69, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x65, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x69, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x69, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x96, 0x02,
	0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x63, 0x76, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x5f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x65, 0x72, 0x72, 0x49, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x5f, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4f,
	0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x64, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x64,
	0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64,
	0x72, 0x6f, 0x70, 0x4f, 0x75, 0x74, 0x22, 0x3d, 0x0a, 0x0e, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2b, 0x0a, 0x05, 0x7a, 0x6f, 0x6e, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x05,
	0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72,
	0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x63, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x51, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x6f, 0x61, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x6f, 0x61,
	0x64, 0x35, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x35, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x31, 0x35, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x7a, 0x6f, 0x6d, 0x62, 0x69, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x7a, 0x6f, 0x6d, 0x62, 0x69, 0x65, 0x2a, 0x7b, 0x0a, 0x12, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x47, 0x45, 0x4e, 0x54,
	0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x02, 0x2a, 0x94, 0x01, 0x0a, 0x11, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x75, 0x6c, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24,
	0x0a, 0x20, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x50, 0x55, 0x4c,
	0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x50,
	0x49, 0x4f, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x50, 0x49,
	0x4f, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x50, 0x49, 0x4f, 0x5f, 0x50,
	0x55, 0x4c, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x32,
	0x89, 0x06, 0x0a, 0x0e, 0x50, 0x69, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x47,
	0x50, 0x49, 0x4f, 0x50, 0x69, 0x6e, 0x12, 0x21, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x47, 0x50, 0x49, 0x4f, 0x50,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x69, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x47, 0x50,
	0x49, 0x4f, 0x50, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x0b, 0x52, 0x65, 0x61, 0x64, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x69, 0x6e, 0x12, 0x1c, 0x2e, 0x70,
	0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x50, 0x49, 0x4f,
	0x50, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x69, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x70, 0x69, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x47,
	0x50, 0x49, 0x4f, 0x50, 0x57, 0x4d, 0x12, 0x1b, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x57, 0x4d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x65, 0x74, 0x47, 0x50, 0x49, 0x4f, 0x50, 0x57, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x50, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70,
	0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x50, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x12, 0x1c, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x24, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x69, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x28, 0x5a, 0x26, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x73, 0x79, 0x6f, 0x72, 0x6b,
	0x64, 0x2f, 0x70, 0x69, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_pi_agent_proto_rawDescOnce sync.Once
	file_proto_pi_agent_proto_rawDescData = file_proto_pi_agent_proto_rawDesc
)

func file_proto_pi_agent_proto_rawDescGZIP() []byte {
	file_proto_pi_agent_proto_rawDescOnce.Do(func() {
		file_proto_pi_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_pi_agent_proto_rawDescData)
	})
	return file_proto_pi_agent_proto_rawDescData
}

var file_proto_pi_agent_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_pi_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_proto_pi_agent_proto_goTypes = []any{
	(AgentGPIODirection)(0),            // 0: pi_agent.AgentGPIODirection
	(AgentGPIOPullMode)(0),             // 1: pi_agent.AgentGPIOPullMode
	(*ConfigureGPIOPinRequest)(nil),    // 2: pi_agent.ConfigureGPIOPinRequest
	(*ConfigureGPIOPinResponse)(nil),   // 3: pi_agent.ConfigureGPIOPinResponse
	(*ReadGPIOPinRequest)(nil),         // 4: pi_agent.ReadGPIOPinRequest
	(*ReadGPIOPinResponse)(nil),        // 5: pi_agent.ReadGPIOPinResponse
	(*WriteGPIOPinRequest)(nil),        // 6: pi_agent.WriteGPIOPinRequest
	(*WriteGPIOPinResponse)(nil),       // 7: pi_agent.WriteGPIOPinResponse
	(*SetGPIOPWMRequest)(nil),          // 8: pi_agent.SetGPIOPWMRequest
	(*SetGPIOPWMResponse)(nil),         // 9: pi_agent.SetGPIOPWMResponse
	(*ListConfiguredPinsRequest)(nil),  // 10: pi_agent.ListConfiguredPinsRequest
	(*ListConfiguredPinsResponse)(nil), // 11: pi_agent.ListConfiguredPinsResponse
	(*GPIOPinState)(nil),               // 12: pi_agent.GPIOPinState
	(*AgentHealthRequest)(nil),         // 13: pi_agent.AgentHealthRequest
	(*AgentHealthResponse)(nil),        // 14: pi_agent.AgentHealthResponse
	(*GetSystemInfoRequest)(nil),       // 15: pi_agent.GetSystemInfoRequest
	(*GetSystemInfoResponse)(nil),      // 16: pi_agent.GetSystemInfoResponse
	(*GetSystemMetricsRequest)(nil),    // 17: pi_agent.GetSystemMetricsRequest
	(*GetSystemMetricsResponse)(nil),   // 18: pi_agent.GetSystemMetricsResponse
	(*StreamSystemMetricsRequest)(nil), // 19: pi_agent.StreamSystemMetricsRequest
	(*SystemMetricsResponse)(nil),      // 20: pi_agent.SystemMetricsResponse
	(*SystemMetrics)(nil),              // 21: pi_agent.SystemMetrics
	(*CPUMetrics)(nil),                 // 22: pi_agent.CPUMetrics
	(*MemoryMetrics)(nil),              // 23: pi_agent.MemoryMetrics
	(*DiskMetrics)(nil),                // 24: pi_agent.DiskMetrics
	(*NetworkMetrics)(nil),             // 25: pi_agent.NetworkMetrics
	(*ThermalMetrics)(nil),             // 26: pi_agent.ThermalMetrics
	(*ThermalZone)(nil),                // 27: pi_agent.ThermalZone
	(*LoadMetrics)(nil),                // 28: pi_agent.LoadMetrics
	(*ProcessMetrics)(nil),             // 29: pi_agent.ProcessMetrics
	(*timestamppb.Timestamp)(nil),      // 30: google.protobuf.Timestamp
}
var file_proto_pi_agent_proto_depIdxs = []int32{
	0,  // 0: pi_agent.ConfigureGPIOPinRequest.direction:type_name -> pi_agent.AgentGPIODirection
	1,  // 1: pi_agent.ConfigureGPIOPinRequest.pull_mode:type_name -> pi_agent.AgentGPIOPullMode
	30, // 2: pi_agent.ConfigureGPIOPinResponse.configured_at:type_name -> google.protobuf.Timestamp
	30, // 3: pi_agent.ReadGPIOPinResponse.timestamp:type_name -> google.protobuf.Timestamp
	30, // 4: pi_agent.WriteGPIOPinResponse.timestamp:type_name -> google.protobuf.Timestamp
	30, // 5: pi_agent.SetGPIOPWMResponse.configured_at:type_name -> google.protobuf.Timestamp
	12, // 6: pi_agent.ListConfiguredPinsResponse.pins:type_name -> pi_agent.GPIOPinState
	0,  // 7: pi_agent.GPIOPinState.direction:type_name -> pi_agent.AgentGPIODirection
	1,  // 8: pi_agent.GPIOPinState.pull_mode:type_name -> pi_agent.AgentGPIOPullMode
	30, // 9: pi_agent.GPIOPinState.last_updated:type_name -> google.protobuf.Timestamp
	30, // 10: pi_agent.AgentHealthResponse.timestamp:type_name -> google.protobuf.Timestamp
	30, // 11: pi_agent.GetSystemInfoResponse.timestamp:type_name -> google.protobuf.Timestamp
	21, // 12: pi_agent.GetSystemMetricsResponse.metrics:type_name -> pi_agent.SystemMetrics
	30, // 13: pi_agent.GetSystemMetricsResponse.timestamp:type_name -> google.protobuf.Timestamp
	21, // 14: pi_agent.SystemMetricsResponse.metrics:type_name -> pi_agent.SystemMetrics
	30, // 15: pi_agent.SystemMetricsResponse.timestamp:type_name -> google.protobuf.Timestamp
	22, // 16: pi_agent.SystemMetrics.cpu:type_name -> pi_agent.CPUMetrics
	23, // 17: pi_agent.SystemMetrics.memory:type_name -> pi_agent.MemoryMetrics
	24, // 18: pi_agent.SystemMetrics.disks:type_name -> pi_agent.DiskMetrics
	25, // 19: pi_agent.SystemMetrics.network:type_name -> pi_agent.NetworkMetrics
	26, // 20: pi_agent.SystemMetrics.thermal:type_name -> pi_agent.ThermalMetrics
	28, // 21: pi_agent.SystemMetrics.load:type_name -> pi_agent.LoadMetrics
	29, // 22: pi_agent.SystemMetrics.processes:type_name -> pi_agent.ProcessMetrics
	27, // 23: pi_agent.ThermalMetrics.zones:type_name -> pi_agent.ThermalZone
	2,  // 24: pi_agent.PiAgentService.ConfigureGPIOPin:input_type -> pi_agent.ConfigureGPIOPinRequest
	4,  // 25: pi_agent.PiAgentService.ReadGPIOPin:input_type -> pi_agent.ReadGPIOPinRequest
	6,  // 26: pi_agent.PiAgentService.WriteGPIOPin:input_type -> pi_agent.WriteGPIOPinRequest
	8,  // 27: pi_agent.PiAgentService.SetGPIOPWM:input_type -> pi_agent.SetGPIOPWMRequest
	10, // 28: pi_agent.PiAgentService.ListConfiguredPins:input_type -> pi_agent.ListConfiguredPinsRequest
	13, // 29: pi_agent.PiAgentService.AgentHealth:input_type -> pi_agent.AgentHealthRequest
	15, // 30: pi_agent.PiAgentService.GetSystemInfo:input_type -> pi_agent.GetSystemInfoRequest
	17, // 31: pi_agent.PiAgentService.GetSystemMetrics:input_type -> pi_agent.GetSystemMetricsRequest
	19, // 32: pi_agent.PiAgentService.StreamSystemMetrics:input_type -> pi_agent.StreamSystemMetricsRequest
	3,  // 33: pi_agent.PiAgentService.ConfigureGPIOPin:output_type -> pi_agent.ConfigureGPIOPinResponse
	5,  // 34: pi_agent.PiAgentService.ReadGPIOPin:output_type -> pi_agent.ReadGPIOPinResponse
	7,  // 35: pi_agent.PiAgentService.WriteGPIOPin:output_type -> pi_agent.WriteGPIOPinResponse
	9,  // 36: pi_agent.PiAgentService.SetGPIOPWM:output_type -> pi_agent.SetGPIOPWMResponse
	11, // 37: pi_agent.PiAgentService.ListConfiguredPins:output_type -> pi_agent.ListConfiguredPinsResponse
	14, // 38: pi_agent.PiAgentService.AgentHealth:output_type -> pi_agent.AgentHealthResponse
	16, // 39: pi_agent.PiAgentService.GetSystemInfo:output_type -> pi_agent.GetSystemInfoResponse
	18, // 40: pi_agent.PiAgentService.GetSystemMetrics:output_type -> pi_agent.GetSystemMetricsResponse
	20, // 41: pi_agent.PiAgentService.StreamSystemMetrics:output_type -> pi_agent.SystemMetricsResponse
	33, // [33:42] is the sub-list for method output_type
	24, // [24:33] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_proto_pi_agent_proto_init() }
func file_proto_pi_agent_proto_init() {
	if File_proto_pi_agent_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_pi_agent_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_pi_agent_proto_goTypes,
		DependencyIndexes: file_proto_pi_agent_proto_depIdxs,
		EnumInfos:         file_proto_pi_agent_proto_enumTypes,
		MessageInfos:      file_proto_pi_agent_proto_msgTypes,
	}.Build()
	File_proto_pi_agent_proto = out.File
	file_proto_pi_agent_proto_rawDesc = nil
	file_proto_pi_agent_proto_goTypes = nil
	file_proto_pi_agent_proto_depIdxs = nil
}
