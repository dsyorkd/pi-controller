// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: proto/pi_controller.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PiControllerService_CreateCluster_FullMethodName      = "/pi_controller.PiControllerService/CreateCluster"
	PiControllerService_GetCluster_FullMethodName         = "/pi_controller.PiControllerService/GetCluster"
	PiControllerService_ListClusters_FullMethodName       = "/pi_controller.PiControllerService/ListClusters"
	PiControllerService_UpdateCluster_FullMethodName      = "/pi_controller.PiControllerService/UpdateCluster"
	PiControllerService_DeleteCluster_FullMethodName      = "/pi_controller.PiControllerService/DeleteCluster"
	PiControllerService_CreateNode_FullMethodName         = "/pi_controller.PiControllerService/CreateNode"
	PiControllerService_GetNode_FullMethodName            = "/pi_controller.PiControllerService/GetNode"
	PiControllerService_ListNodes_FullMethodName          = "/pi_controller.PiControllerService/ListNodes"
	PiControllerService_UpdateNode_FullMethodName         = "/pi_controller.PiControllerService/UpdateNode"
	PiControllerService_DeleteNode_FullMethodName         = "/pi_controller.PiControllerService/DeleteNode"
	PiControllerService_ProvisionNode_FullMethodName      = "/pi_controller.PiControllerService/ProvisionNode"
	PiControllerService_DeprovisionNode_FullMethodName    = "/pi_controller.PiControllerService/DeprovisionNode"
	PiControllerService_CreateGPIODevice_FullMethodName   = "/pi_controller.PiControllerService/CreateGPIODevice"
	PiControllerService_GetGPIODevice_FullMethodName      = "/pi_controller.PiControllerService/GetGPIODevice"
	PiControllerService_ListGPIODevices_FullMethodName    = "/pi_controller.PiControllerService/ListGPIODevices"
	PiControllerService_UpdateGPIODevice_FullMethodName   = "/pi_controller.PiControllerService/UpdateGPIODevice"
	PiControllerService_DeleteGPIODevice_FullMethodName   = "/pi_controller.PiControllerService/DeleteGPIODevice"
	PiControllerService_ReadGPIO_FullMethodName           = "/pi_controller.PiControllerService/ReadGPIO"
	PiControllerService_WriteGPIO_FullMethodName          = "/pi_controller.PiControllerService/WriteGPIO"
	PiControllerService_StreamGPIOReadings_FullMethodName = "/pi_controller.PiControllerService/StreamGPIOReadings"
	PiControllerService_Health_FullMethodName             = "/pi_controller.PiControllerService/Health"
	PiControllerService_GetSystemInfo_FullMethodName      = "/pi_controller.PiControllerService/GetSystemInfo"
)

// PiControllerServiceClient is the client API for PiControllerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PiControllerService provides gRPC API for managing Pi clusters
type PiControllerServiceClient interface {
	// Cluster management
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*DeleteClusterResponse, error)
	// Node management
	CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*Node, error)
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*Node, error)
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*Node, error)
	DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error)
	ProvisionNode(ctx context.Context, in *ProvisionNodeRequest, opts ...grpc.CallOption) (*ProvisionNodeResponse, error)
	DeprovisionNode(ctx context.Context, in *DeprovisionNodeRequest, opts ...grpc.CallOption) (*DeprovisionNodeResponse, error)
	// GPIO management
	CreateGPIODevice(ctx context.Context, in *CreateGPIODeviceRequest, opts ...grpc.CallOption) (*GPIODevice, error)
	GetGPIODevice(ctx context.Context, in *GetGPIODeviceRequest, opts ...grpc.CallOption) (*GPIODevice, error)
	ListGPIODevices(ctx context.Context, in *ListGPIODevicesRequest, opts ...grpc.CallOption) (*ListGPIODevicesResponse, error)
	UpdateGPIODevice(ctx context.Context, in *UpdateGPIODeviceRequest, opts ...grpc.CallOption) (*GPIODevice, error)
	DeleteGPIODevice(ctx context.Context, in *DeleteGPIODeviceRequest, opts ...grpc.CallOption) (*DeleteGPIODeviceResponse, error)
	ReadGPIO(ctx context.Context, in *ReadGPIORequest, opts ...grpc.CallOption) (*ReadGPIOResponse, error)
	WriteGPIO(ctx context.Context, in *WriteGPIORequest, opts ...grpc.CallOption) (*WriteGPIOResponse, error)
	// Real-time GPIO streaming
	StreamGPIOReadings(ctx context.Context, in *StreamGPIOReadingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GPIOReading], error)
	// Health and status
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	GetSystemInfo(ctx context.Context, in *SystemInfoRequest, opts ...grpc.CallOption) (*SystemInfoResponse, error)
}

type piControllerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPiControllerServiceClient(cc grpc.ClientConnInterface) PiControllerServiceClient {
	return &piControllerServiceClient{cc}
}

func (c *piControllerServiceClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cluster)
	err := c.cc.Invoke(ctx, PiControllerService_CreateCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cluster)
	err := c.cc.Invoke(ctx, PiControllerService_GetCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, PiControllerService_ListClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cluster)
	err := c.cc.Invoke(ctx, PiControllerService_UpdateCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*DeleteClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteClusterResponse)
	err := c.cc.Invoke(ctx, PiControllerService_DeleteCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Node)
	err := c.cc.Invoke(ctx, PiControllerService_CreateNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Node)
	err := c.cc.Invoke(ctx, PiControllerService_GetNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, PiControllerService_ListNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*Node, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Node)
	err := c.cc.Invoke(ctx, PiControllerService_UpdateNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteNodeResponse)
	err := c.cc.Invoke(ctx, PiControllerService_DeleteNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) ProvisionNode(ctx context.Context, in *ProvisionNodeRequest, opts ...grpc.CallOption) (*ProvisionNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvisionNodeResponse)
	err := c.cc.Invoke(ctx, PiControllerService_ProvisionNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) DeprovisionNode(ctx context.Context, in *DeprovisionNodeRequest, opts ...grpc.CallOption) (*DeprovisionNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeprovisionNodeResponse)
	err := c.cc.Invoke(ctx, PiControllerService_DeprovisionNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) CreateGPIODevice(ctx context.Context, in *CreateGPIODeviceRequest, opts ...grpc.CallOption) (*GPIODevice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GPIODevice)
	err := c.cc.Invoke(ctx, PiControllerService_CreateGPIODevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) GetGPIODevice(ctx context.Context, in *GetGPIODeviceRequest, opts ...grpc.CallOption) (*GPIODevice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GPIODevice)
	err := c.cc.Invoke(ctx, PiControllerService_GetGPIODevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) ListGPIODevices(ctx context.Context, in *ListGPIODevicesRequest, opts ...grpc.CallOption) (*ListGPIODevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGPIODevicesResponse)
	err := c.cc.Invoke(ctx, PiControllerService_ListGPIODevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) UpdateGPIODevice(ctx context.Context, in *UpdateGPIODeviceRequest, opts ...grpc.CallOption) (*GPIODevice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GPIODevice)
	err := c.cc.Invoke(ctx, PiControllerService_UpdateGPIODevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) DeleteGPIODevice(ctx context.Context, in *DeleteGPIODeviceRequest, opts ...grpc.CallOption) (*DeleteGPIODeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGPIODeviceResponse)
	err := c.cc.Invoke(ctx, PiControllerService_DeleteGPIODevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) ReadGPIO(ctx context.Context, in *ReadGPIORequest, opts ...grpc.CallOption) (*ReadGPIOResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadGPIOResponse)
	err := c.cc.Invoke(ctx, PiControllerService_ReadGPIO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) WriteGPIO(ctx context.Context, in *WriteGPIORequest, opts ...grpc.CallOption) (*WriteGPIOResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteGPIOResponse)
	err := c.cc.Invoke(ctx, PiControllerService_WriteGPIO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) StreamGPIOReadings(ctx context.Context, in *StreamGPIOReadingsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GPIOReading], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PiControllerService_ServiceDesc.Streams[0], PiControllerService_StreamGPIOReadings_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamGPIOReadingsRequest, GPIOReading]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PiControllerService_StreamGPIOReadingsClient = grpc.ServerStreamingClient[GPIOReading]

func (c *piControllerServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, PiControllerService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piControllerServiceClient) GetSystemInfo(ctx context.Context, in *SystemInfoRequest, opts ...grpc.CallOption) (*SystemInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemInfoResponse)
	err := c.cc.Invoke(ctx, PiControllerService_GetSystemInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PiControllerServiceServer is the server API for PiControllerService service.
// All implementations must embed UnimplementedPiControllerServiceServer
// for forward compatibility.
//
// PiControllerService provides gRPC API for managing Pi clusters
type PiControllerServiceServer interface {
	// Cluster management
	CreateCluster(context.Context, *CreateClusterRequest) (*Cluster, error)
	GetCluster(context.Context, *GetClusterRequest) (*Cluster, error)
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	UpdateCluster(context.Context, *UpdateClusterRequest) (*Cluster, error)
	DeleteCluster(context.Context, *DeleteClusterRequest) (*DeleteClusterResponse, error)
	// Node management
	CreateNode(context.Context, *CreateNodeRequest) (*Node, error)
	GetNode(context.Context, *GetNodeRequest) (*Node, error)
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	UpdateNode(context.Context, *UpdateNodeRequest) (*Node, error)
	DeleteNode(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error)
	ProvisionNode(context.Context, *ProvisionNodeRequest) (*ProvisionNodeResponse, error)
	DeprovisionNode(context.Context, *DeprovisionNodeRequest) (*DeprovisionNodeResponse, error)
	// GPIO management
	CreateGPIODevice(context.Context, *CreateGPIODeviceRequest) (*GPIODevice, error)
	GetGPIODevice(context.Context, *GetGPIODeviceRequest) (*GPIODevice, error)
	ListGPIODevices(context.Context, *ListGPIODevicesRequest) (*ListGPIODevicesResponse, error)
	UpdateGPIODevice(context.Context, *UpdateGPIODeviceRequest) (*GPIODevice, error)
	DeleteGPIODevice(context.Context, *DeleteGPIODeviceRequest) (*DeleteGPIODeviceResponse, error)
	ReadGPIO(context.Context, *ReadGPIORequest) (*ReadGPIOResponse, error)
	WriteGPIO(context.Context, *WriteGPIORequest) (*WriteGPIOResponse, error)
	// Real-time GPIO streaming
	StreamGPIOReadings(*StreamGPIOReadingsRequest, grpc.ServerStreamingServer[GPIOReading]) error
	// Health and status
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	GetSystemInfo(context.Context, *SystemInfoRequest) (*SystemInfoResponse, error)
	mustEmbedUnimplementedPiControllerServiceServer()
}

// UnimplementedPiControllerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPiControllerServiceServer struct{}

func (UnimplementedPiControllerServiceServer) CreateCluster(context.Context, *CreateClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedPiControllerServiceServer) GetCluster(context.Context, *GetClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedPiControllerServiceServer) ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedPiControllerServiceServer) UpdateCluster(context.Context, *UpdateClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (UnimplementedPiControllerServiceServer) DeleteCluster(context.Context, *DeleteClusterRequest) (*DeleteClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedPiControllerServiceServer) CreateNode(context.Context, *CreateNodeRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedPiControllerServiceServer) GetNode(context.Context, *GetNodeRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedPiControllerServiceServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedPiControllerServiceServer) UpdateNode(context.Context, *UpdateNodeRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedPiControllerServiceServer) DeleteNode(context.Context, *DeleteNodeRequest) (*DeleteNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedPiControllerServiceServer) ProvisionNode(context.Context, *ProvisionNodeRequest) (*ProvisionNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvisionNode not implemented")
}
func (UnimplementedPiControllerServiceServer) DeprovisionNode(context.Context, *DeprovisionNodeRequest) (*DeprovisionNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeprovisionNode not implemented")
}
func (UnimplementedPiControllerServiceServer) CreateGPIODevice(context.Context, *CreateGPIODeviceRequest) (*GPIODevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGPIODevice not implemented")
}
func (UnimplementedPiControllerServiceServer) GetGPIODevice(context.Context, *GetGPIODeviceRequest) (*GPIODevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGPIODevice not implemented")
}
func (UnimplementedPiControllerServiceServer) ListGPIODevices(context.Context, *ListGPIODevicesRequest) (*ListGPIODevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGPIODevices not implemented")
}
func (UnimplementedPiControllerServiceServer) UpdateGPIODevice(context.Context, *UpdateGPIODeviceRequest) (*GPIODevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGPIODevice not implemented")
}
func (UnimplementedPiControllerServiceServer) DeleteGPIODevice(context.Context, *DeleteGPIODeviceRequest) (*DeleteGPIODeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGPIODevice not implemented")
}
func (UnimplementedPiControllerServiceServer) ReadGPIO(context.Context, *ReadGPIORequest) (*ReadGPIOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadGPIO not implemented")
}
func (UnimplementedPiControllerServiceServer) WriteGPIO(context.Context, *WriteGPIORequest) (*WriteGPIOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteGPIO not implemented")
}
func (UnimplementedPiControllerServiceServer) StreamGPIOReadings(*StreamGPIOReadingsRequest, grpc.ServerStreamingServer[GPIOReading]) error {
	return status.Errorf(codes.Unimplemented, "method StreamGPIOReadings not implemented")
}
func (UnimplementedPiControllerServiceServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedPiControllerServiceServer) GetSystemInfo(context.Context, *SystemInfoRequest) (*SystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedPiControllerServiceServer) mustEmbedUnimplementedPiControllerServiceServer() {}
func (UnimplementedPiControllerServiceServer) testEmbeddedByValue()                             {}

// UnsafePiControllerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PiControllerServiceServer will
// result in compilation errors.
type UnsafePiControllerServiceServer interface {
	mustEmbedUnimplementedPiControllerServiceServer()
}

func RegisterPiControllerServiceServer(s grpc.ServiceRegistrar, srv PiControllerServiceServer) {
	// If the following call pancis, it indicates UnimplementedPiControllerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PiControllerService_ServiceDesc, srv)
}

func _PiControllerService_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_CreateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).CreateCluster(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_ListClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_UpdateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).UpdateCluster(ctx, req.(*UpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_DeleteCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).DeleteCluster(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_CreateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).CreateNode(ctx, req.(*CreateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_ListNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_UpdateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).UpdateNode(ctx, req.(*UpdateNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_DeleteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).DeleteNode(ctx, req.(*DeleteNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_ProvisionNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).ProvisionNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_ProvisionNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).ProvisionNode(ctx, req.(*ProvisionNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_DeprovisionNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeprovisionNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).DeprovisionNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_DeprovisionNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).DeprovisionNode(ctx, req.(*DeprovisionNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_CreateGPIODevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGPIODeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).CreateGPIODevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_CreateGPIODevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).CreateGPIODevice(ctx, req.(*CreateGPIODeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_GetGPIODevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGPIODeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).GetGPIODevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_GetGPIODevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).GetGPIODevice(ctx, req.(*GetGPIODeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_ListGPIODevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGPIODevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).ListGPIODevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_ListGPIODevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).ListGPIODevices(ctx, req.(*ListGPIODevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_UpdateGPIODevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGPIODeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).UpdateGPIODevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_UpdateGPIODevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).UpdateGPIODevice(ctx, req.(*UpdateGPIODeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_DeleteGPIODevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGPIODeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).DeleteGPIODevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_DeleteGPIODevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).DeleteGPIODevice(ctx, req.(*DeleteGPIODeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_ReadGPIO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadGPIORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).ReadGPIO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_ReadGPIO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).ReadGPIO(ctx, req.(*ReadGPIORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_WriteGPIO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteGPIORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).WriteGPIO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_WriteGPIO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).WriteGPIO(ctx, req.(*WriteGPIORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_StreamGPIOReadings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamGPIOReadingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PiControllerServiceServer).StreamGPIOReadings(m, &grpc.GenericServerStream[StreamGPIOReadingsRequest, GPIOReading]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PiControllerService_StreamGPIOReadingsServer = grpc.ServerStreamingServer[GPIOReading]

func _PiControllerService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiControllerService_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiControllerServiceServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiControllerService_GetSystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiControllerServiceServer).GetSystemInfo(ctx, req.(*SystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PiControllerService_ServiceDesc is the grpc.ServiceDesc for PiControllerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PiControllerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pi_controller.PiControllerService",
	HandlerType: (*PiControllerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCluster",
			Handler:    _PiControllerService_CreateCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _PiControllerService_GetCluster_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _PiControllerService_ListClusters_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _PiControllerService_UpdateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _PiControllerService_DeleteCluster_Handler,
		},
		{
			MethodName: "CreateNode",
			Handler:    _PiControllerService_CreateNode_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _PiControllerService_GetNode_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _PiControllerService_ListNodes_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _PiControllerService_UpdateNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _PiControllerService_DeleteNode_Handler,
		},
		{
			MethodName: "ProvisionNode",
			Handler:    _PiControllerService_ProvisionNode_Handler,
		},
		{
			MethodName: "DeprovisionNode",
			Handler:    _PiControllerService_DeprovisionNode_Handler,
		},
		{
			MethodName: "CreateGPIODevice",
			Handler:    _PiControllerService_CreateGPIODevice_Handler,
		},
		{
			MethodName: "GetGPIODevice",
			Handler:    _PiControllerService_GetGPIODevice_Handler,
		},
		{
			MethodName: "ListGPIODevices",
			Handler:    _PiControllerService_ListGPIODevices_Handler,
		},
		{
			MethodName: "UpdateGPIODevice",
			Handler:    _PiControllerService_UpdateGPIODevice_Handler,
		},
		{
			MethodName: "DeleteGPIODevice",
			Handler:    _PiControllerService_DeleteGPIODevice_Handler,
		},
		{
			MethodName: "ReadGPIO",
			Handler:    _PiControllerService_ReadGPIO_Handler,
		},
		{
			MethodName: "WriteGPIO",
			Handler:    _PiControllerService_WriteGPIO_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _PiControllerService_Health_Handler,
		},
		{
			MethodName: "GetSystemInfo",
			Handler:    _PiControllerService_GetSystemInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGPIOReadings",
			Handler:       _PiControllerService_StreamGPIOReadings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/pi_controller.proto",
}
