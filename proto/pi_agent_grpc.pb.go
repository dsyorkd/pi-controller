// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: proto/pi_agent.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PiAgentService_ConfigureGPIOPin_FullMethodName    = "/pi_agent.PiAgentService/ConfigureGPIOPin"
	PiAgentService_ReadGPIOPin_FullMethodName         = "/pi_agent.PiAgentService/ReadGPIOPin"
	PiAgentService_WriteGPIOPin_FullMethodName        = "/pi_agent.PiAgentService/WriteGPIOPin"
	PiAgentService_SetGPIOPWM_FullMethodName          = "/pi_agent.PiAgentService/SetGPIOPWM"
	PiAgentService_ListConfiguredPins_FullMethodName  = "/pi_agent.PiAgentService/ListConfiguredPins"
	PiAgentService_AgentHealth_FullMethodName         = "/pi_agent.PiAgentService/AgentHealth"
	PiAgentService_GetSystemInfo_FullMethodName       = "/pi_agent.PiAgentService/GetSystemInfo"
	PiAgentService_GetSystemMetrics_FullMethodName    = "/pi_agent.PiAgentService/GetSystemMetrics"
	PiAgentService_StreamSystemMetrics_FullMethodName = "/pi_agent.PiAgentService/StreamSystemMetrics"
)

// PiAgentServiceClient is the client API for PiAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PiAgentService provides gRPC API for direct hardware control on Pi nodes
type PiAgentServiceClient interface {
	// GPIO operations
	ConfigureGPIOPin(ctx context.Context, in *ConfigureGPIOPinRequest, opts ...grpc.CallOption) (*ConfigureGPIOPinResponse, error)
	ReadGPIOPin(ctx context.Context, in *ReadGPIOPinRequest, opts ...grpc.CallOption) (*ReadGPIOPinResponse, error)
	WriteGPIOPin(ctx context.Context, in *WriteGPIOPinRequest, opts ...grpc.CallOption) (*WriteGPIOPinResponse, error)
	SetGPIOPWM(ctx context.Context, in *SetGPIOPWMRequest, opts ...grpc.CallOption) (*SetGPIOPWMResponse, error)
	ListConfiguredPins(ctx context.Context, in *ListConfiguredPinsRequest, opts ...grpc.CallOption) (*ListConfiguredPinsResponse, error)
	// Health and status
	AgentHealth(ctx context.Context, in *AgentHealthRequest, opts ...grpc.CallOption) (*AgentHealthResponse, error)
	GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoResponse, error)
	// System metrics
	GetSystemMetrics(ctx context.Context, in *GetSystemMetricsRequest, opts ...grpc.CallOption) (*GetSystemMetricsResponse, error)
	StreamSystemMetrics(ctx context.Context, in *StreamSystemMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SystemMetricsResponse], error)
}

type piAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPiAgentServiceClient(cc grpc.ClientConnInterface) PiAgentServiceClient {
	return &piAgentServiceClient{cc}
}

func (c *piAgentServiceClient) ConfigureGPIOPin(ctx context.Context, in *ConfigureGPIOPinRequest, opts ...grpc.CallOption) (*ConfigureGPIOPinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureGPIOPinResponse)
	err := c.cc.Invoke(ctx, PiAgentService_ConfigureGPIOPin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piAgentServiceClient) ReadGPIOPin(ctx context.Context, in *ReadGPIOPinRequest, opts ...grpc.CallOption) (*ReadGPIOPinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadGPIOPinResponse)
	err := c.cc.Invoke(ctx, PiAgentService_ReadGPIOPin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piAgentServiceClient) WriteGPIOPin(ctx context.Context, in *WriteGPIOPinRequest, opts ...grpc.CallOption) (*WriteGPIOPinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteGPIOPinResponse)
	err := c.cc.Invoke(ctx, PiAgentService_WriteGPIOPin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piAgentServiceClient) SetGPIOPWM(ctx context.Context, in *SetGPIOPWMRequest, opts ...grpc.CallOption) (*SetGPIOPWMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetGPIOPWMResponse)
	err := c.cc.Invoke(ctx, PiAgentService_SetGPIOPWM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piAgentServiceClient) ListConfiguredPins(ctx context.Context, in *ListConfiguredPinsRequest, opts ...grpc.CallOption) (*ListConfiguredPinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConfiguredPinsResponse)
	err := c.cc.Invoke(ctx, PiAgentService_ListConfiguredPins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piAgentServiceClient) AgentHealth(ctx context.Context, in *AgentHealthRequest, opts ...grpc.CallOption) (*AgentHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentHealthResponse)
	err := c.cc.Invoke(ctx, PiAgentService_AgentHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piAgentServiceClient) GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*GetSystemInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemInfoResponse)
	err := c.cc.Invoke(ctx, PiAgentService_GetSystemInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piAgentServiceClient) GetSystemMetrics(ctx context.Context, in *GetSystemMetricsRequest, opts ...grpc.CallOption) (*GetSystemMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemMetricsResponse)
	err := c.cc.Invoke(ctx, PiAgentService_GetSystemMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *piAgentServiceClient) StreamSystemMetrics(ctx context.Context, in *StreamSystemMetricsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SystemMetricsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PiAgentService_ServiceDesc.Streams[0], PiAgentService_StreamSystemMetrics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamSystemMetricsRequest, SystemMetricsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PiAgentService_StreamSystemMetricsClient = grpc.ServerStreamingClient[SystemMetricsResponse]

// PiAgentServiceServer is the server API for PiAgentService service.
// All implementations must embed UnimplementedPiAgentServiceServer
// for forward compatibility.
//
// PiAgentService provides gRPC API for direct hardware control on Pi nodes
type PiAgentServiceServer interface {
	// GPIO operations
	ConfigureGPIOPin(context.Context, *ConfigureGPIOPinRequest) (*ConfigureGPIOPinResponse, error)
	ReadGPIOPin(context.Context, *ReadGPIOPinRequest) (*ReadGPIOPinResponse, error)
	WriteGPIOPin(context.Context, *WriteGPIOPinRequest) (*WriteGPIOPinResponse, error)
	SetGPIOPWM(context.Context, *SetGPIOPWMRequest) (*SetGPIOPWMResponse, error)
	ListConfiguredPins(context.Context, *ListConfiguredPinsRequest) (*ListConfiguredPinsResponse, error)
	// Health and status
	AgentHealth(context.Context, *AgentHealthRequest) (*AgentHealthResponse, error)
	GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoResponse, error)
	// System metrics
	GetSystemMetrics(context.Context, *GetSystemMetricsRequest) (*GetSystemMetricsResponse, error)
	StreamSystemMetrics(*StreamSystemMetricsRequest, grpc.ServerStreamingServer[SystemMetricsResponse]) error
	mustEmbedUnimplementedPiAgentServiceServer()
}

// UnimplementedPiAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPiAgentServiceServer struct{}

func (UnimplementedPiAgentServiceServer) ConfigureGPIOPin(context.Context, *ConfigureGPIOPinRequest) (*ConfigureGPIOPinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureGPIOPin not implemented")
}
func (UnimplementedPiAgentServiceServer) ReadGPIOPin(context.Context, *ReadGPIOPinRequest) (*ReadGPIOPinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadGPIOPin not implemented")
}
func (UnimplementedPiAgentServiceServer) WriteGPIOPin(context.Context, *WriteGPIOPinRequest) (*WriteGPIOPinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteGPIOPin not implemented")
}
func (UnimplementedPiAgentServiceServer) SetGPIOPWM(context.Context, *SetGPIOPWMRequest) (*SetGPIOPWMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGPIOPWM not implemented")
}
func (UnimplementedPiAgentServiceServer) ListConfiguredPins(context.Context, *ListConfiguredPinsRequest) (*ListConfiguredPinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfiguredPins not implemented")
}
func (UnimplementedPiAgentServiceServer) AgentHealth(context.Context, *AgentHealthRequest) (*AgentHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentHealth not implemented")
}
func (UnimplementedPiAgentServiceServer) GetSystemInfo(context.Context, *GetSystemInfoRequest) (*GetSystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemInfo not implemented")
}
func (UnimplementedPiAgentServiceServer) GetSystemMetrics(context.Context, *GetSystemMetricsRequest) (*GetSystemMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemMetrics not implemented")
}
func (UnimplementedPiAgentServiceServer) StreamSystemMetrics(*StreamSystemMetricsRequest, grpc.ServerStreamingServer[SystemMetricsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSystemMetrics not implemented")
}
func (UnimplementedPiAgentServiceServer) mustEmbedUnimplementedPiAgentServiceServer() {}
func (UnimplementedPiAgentServiceServer) testEmbeddedByValue()                        {}

// UnsafePiAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PiAgentServiceServer will
// result in compilation errors.
type UnsafePiAgentServiceServer interface {
	mustEmbedUnimplementedPiAgentServiceServer()
}

func RegisterPiAgentServiceServer(s grpc.ServiceRegistrar, srv PiAgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPiAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PiAgentService_ServiceDesc, srv)
}

func _PiAgentService_ConfigureGPIOPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureGPIOPinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiAgentServiceServer).ConfigureGPIOPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiAgentService_ConfigureGPIOPin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiAgentServiceServer).ConfigureGPIOPin(ctx, req.(*ConfigureGPIOPinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiAgentService_ReadGPIOPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadGPIOPinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiAgentServiceServer).ReadGPIOPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiAgentService_ReadGPIOPin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiAgentServiceServer).ReadGPIOPin(ctx, req.(*ReadGPIOPinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiAgentService_WriteGPIOPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteGPIOPinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiAgentServiceServer).WriteGPIOPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiAgentService_WriteGPIOPin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiAgentServiceServer).WriteGPIOPin(ctx, req.(*WriteGPIOPinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiAgentService_SetGPIOPWM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGPIOPWMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiAgentServiceServer).SetGPIOPWM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiAgentService_SetGPIOPWM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiAgentServiceServer).SetGPIOPWM(ctx, req.(*SetGPIOPWMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiAgentService_ListConfiguredPins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConfiguredPinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiAgentServiceServer).ListConfiguredPins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiAgentService_ListConfiguredPins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiAgentServiceServer).ListConfiguredPins(ctx, req.(*ListConfiguredPinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiAgentService_AgentHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiAgentServiceServer).AgentHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiAgentService_AgentHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiAgentServiceServer).AgentHealth(ctx, req.(*AgentHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiAgentService_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiAgentServiceServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiAgentService_GetSystemInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiAgentServiceServer).GetSystemInfo(ctx, req.(*GetSystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiAgentService_GetSystemMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PiAgentServiceServer).GetSystemMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PiAgentService_GetSystemMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PiAgentServiceServer).GetSystemMetrics(ctx, req.(*GetSystemMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PiAgentService_StreamSystemMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSystemMetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PiAgentServiceServer).StreamSystemMetrics(m, &grpc.GenericServerStream[StreamSystemMetricsRequest, SystemMetricsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PiAgentService_StreamSystemMetricsServer = grpc.ServerStreamingServer[SystemMetricsResponse]

// PiAgentService_ServiceDesc is the grpc.ServiceDesc for PiAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PiAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pi_agent.PiAgentService",
	HandlerType: (*PiAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureGPIOPin",
			Handler:    _PiAgentService_ConfigureGPIOPin_Handler,
		},
		{
			MethodName: "ReadGPIOPin",
			Handler:    _PiAgentService_ReadGPIOPin_Handler,
		},
		{
			MethodName: "WriteGPIOPin",
			Handler:    _PiAgentService_WriteGPIOPin_Handler,
		},
		{
			MethodName: "SetGPIOPWM",
			Handler:    _PiAgentService_SetGPIOPWM_Handler,
		},
		{
			MethodName: "ListConfiguredPins",
			Handler:    _PiAgentService_ListConfiguredPins_Handler,
		},
		{
			MethodName: "AgentHealth",
			Handler:    _PiAgentService_AgentHealth_Handler,
		},
		{
			MethodName: "GetSystemInfo",
			Handler:    _PiAgentService_GetSystemInfo_Handler,
		},
		{
			MethodName: "GetSystemMetrics",
			Handler:    _PiAgentService_GetSystemMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSystemMetrics",
			Handler:       _PiAgentService_StreamSystemMetrics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/pi_agent.proto",
}
